<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
//
// Copyright 2019 Google LLC
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

using System;
using System.Linq;
using System.Text.RegularExpressions;

namespace Google.Solutions.Common.Locator
{
	<#
	var classNames = new [] {"DiskType", "Instance", "MachineType"};

	foreach (var className in classNames)
	{
        var resourceType = Char.ToLowerInvariant(className[0]) + className.Substring(1) + "s";
        #>

		public class <#= className #>Locator : ResourceLocator, IEquatable<<#= className #>Locator>
		{
            public string Zone { get; }
            public override string ResourceType => "<#= resourceType #>";

		    public <#= className #>Locator(string projectId, string zone, string name)
                : base(projectId, name)
            {
                this.Zone = zone;
            }

            public static <#= className #>Locator FromString(string resourceReference)
            {
                resourceReference = StripUrlPrefix(resourceReference);

                var match = new Regex("(?:/compute/beta/)?projects/(.*)/zones/(.*)/<#= resourceType #>/(.*)")
                    .Match(resourceReference);
                if (match.Success)
                {
                    return new <#= className #>Locator(
                        match.Groups[1].Value,
                        match.Groups[2].Value,
                        match.Groups[3].Value);
                }
                else
                {
                    throw new ArgumentException($"'{resourceReference}' is not a valid zonal resource reference");
                }
            }

            public override int GetHashCode()
            {
                return
                    this.ProjectId.GetHashCode() ^
                    this.Name.GetHashCode();
            }

            public override string ToString()
            {
                return $"projects/{this.ProjectId}/zones/{this.Zone}/{this.ResourceType}/{this.Name}";
            }

            public bool Equals(<#= className #>Locator other)
            {
                return other is object &&
                    this.Name == other.Name &&
                    this.Zone == other.Zone &&
                    this.ProjectId == other.ProjectId;
            }

            public override bool Equals(object obj)
            {
                return obj is <#= className #>Locator locator && Equals(locator);
            }

            public static bool operator ==(<#= className #>Locator obj1, <#= className #>Locator obj2)
            {
                if (obj1 is null)
                {
                    return obj2 is null;
                }

                return obj1.Equals(obj2);
            }

            public static bool operator !=(<#= className #>Locator obj1, <#= className #>Locator obj2)
            {
                return !(obj1 == obj2);
            }

		}

	<# } #>
}