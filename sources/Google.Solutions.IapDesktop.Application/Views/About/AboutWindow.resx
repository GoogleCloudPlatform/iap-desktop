<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAcIAAAEsCAMAAABniEOFAAAABGdBTUEAALGPC/xhBQAAAwBQTFRFAAAA
        AAMMAAgOCQYEAAERBQ0VAAofBxIfEgMAEQkBGwMAFhMPFhcVAQUmAA8zAhYoAhQyAhM5GR0rKAkBJBcH
        MggANRwBPRQAICEgAhhHDBRfEBlRBiFXDjFRFy1JHzRaADVuBDt5IC1CJDpWHU5+P05ZI0FlIkNtJVJ4
        SQEATxsATy0MUS8AWDEEWzgcUTghYjsVcC4LcjYFfk8caEUqe0EqSkpKQE9ZSlBVUU9OSkpgT2JbbFFK
        E0OGGFq8KFyJP1yOM1qXOmSHPGKfLHawNn26IXHyRnKYSXWrS3ysRX6+T3+wIqp2OYC0LdubMtueToCu
        VoCtXIm2c4KTZ4qlZI+9bI62RYjAUpPDQYT0YZnHcZvIYojyaoryaZTzdIzycpPzc5z0fZDyepv0bqHP
        bKnZcaPOeafNeKvWa6b2eqX2S+CqgDUei1QSiVs1n2gWs28/jXFQmm1Ho29Fkoh7vINHuotZqIlhqpNt
        wIZQyZJMypphyp500ql3lpaWqaSfpqmnsry8vLy8g5TyhJzziZPyiZvyl5ryj6vPg6/VlLvchKP0gKzy
        hK/4iqP0jKj1hrviibf4k6j1krP3kbb4krz6m7X2mrX4mrj4oJzzvL7AqKbzprj2sqXzs6rzvaLyuqvz
        t7j1lMbllsH6ls/1mcP7n8r7ndL4h+XDi+bFvMDCu83Htsvdpc3op8f5rtPpqdH6ssP4s8z6vMr5s9T8
        ttr+u9X6u93yvNv8uuL917KA2rmb4LWAyLn00b324L31wsC93syz5sqb8cWL8ceQ98uW5sui7Ni39Nqo
        /9Wi9dm1/OS8xMXEyMrRxsj3xdT62Mj11tb5zuDvyeX8yfH93OPp0+Pw0uL81Ov21Or93OT72+z91fjr
        2fT95Mn25tX35NP449r579H36dL469z37N349Nv4+uXF9enV++3U+ezZ/vfV4OX75Ov87eX66e386fzv
        4/P94vz/6/T96Pn+9ej6/fLi+/Xq/vns8vT98/z+/PP7//z0/v7+AAAAAAAAb2LeKwAAAAlwSFlzAAAO
        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
        CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3
        CIqQNwiKkDcIipA3CIqQNwiKkLezkAhpg6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5
        g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5
        g6AIeYOgCHmDoAh5g6AIefseEiFtm5EIaYOgCHmDoAh5g6AIeYOgCHmDoAh5g6AIeYOgCHmDoAh5g+Dm
        wprBwfiFcUUTBDcX+gcH4xfGFU0Q3FwYRBhXNEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8
        QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8
        QVCEvEFQhLxBUIS8QVCEvEFwc+HtCOOKJgiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQ
        NwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQNwiKkDcIipA3CIqQ
        NwiKkDcIipA3CIqQtzkkQtogOFd4CcK4ogmCIuQNgiLkDYIi5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYIi
        5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYIi
        5A2CIuQNgiLkDYIi5A2CIuQNgnOF5yGMK5ogKELeIChC3iAoQt4gKELeIChC3iAoQt4gKELeIChC3iAo
        Qt4gKELeIChC3iAoQt4gKELeIChC3iAoQt4gKELeIChC3iAoQt4gKELeIChC3iAoQt4gKELeIChC3iAo
        Qt4gKELeIChC3iAoQt4gKELeIChC3iAoQt4gqL9fyBsERcgbBEXIGwRFyBsERcgbBEXIGwRFyBsERcgb
        BPXPMfMGQRHyBkER8gZBEfIGQRHyBkER8gbBucIgwriiCYIi5A2CIuQNgiLkDYIi5A2CIuQNgiLkDYJz
        hSmEcUUTBEXIGwRFyBsERcgbBEXIWwKcm/sP6aiZDS1V4A8AAAAASUVORK5CYII=
</value>
  </data>
</root>