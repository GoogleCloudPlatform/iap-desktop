<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAcIAAAEsCAMAAABniEOFAAAABGdBTUEAALGPC/xhBQAAAwBQTFRFAAAA
        AAMMAAgOCQYEAAERBQ0VAAofBxIfEgMAEQkBGwMAFhMPFhcVAQUmAA8zAhYoAhQyAhM5GR0rKAkBJBcH
        MggANRwBPRQAICEgAhhHDBRfEBlRBiFXDjFRFy1JHzRaADVuBDt5IC1CJDpWHU5+P05ZI0FlIkNtJVJ4
        SQEATxsATy0MUS8AWDEEWzgcUTghYjsVcC4LcjYFfk8caEUqe0EqSkpKQE9ZSlBVUU9OSkpgT2JbbFFK
        E0OGGFq8KFyJP1yOM1qXOmSHPGKfLHawNn26IXHyRnKYSXWrS3ysRX6+T3+wIqp2OYC0LdubMtueToCu
        VoCtXIm2c4KTZ4qlZI+9bI62RYjAUpPDQYT0YZnHcZvIYojyaoryaZTzdIzycpPzc5z0fZDyepv0bqHP
        bKnZcaPOeafNeKvWa6b2eqX2S+CqgDUei1QSiVs1n2gWs28/jXFQmm1Ho29Fkoh7vINHuotZqIlhqpNt
        wIZQyZJMypphyp500ql3lpaWqaSfpqmnsry8vLy8g5TyhJzziZPyiZvyl5ryj6vPg6/VlLvchKP0gKzy
        hK/4iqP0jKj1hrviibf4k6j1krP3kbb4krz6m7X2mrX4mrj4oJzzvL7AqKbzprj2sqXzs6rzvaLyuqvz
        t7j1lMbllsH6ls/1mcP7n8r7ndL4h+XDi+bFvMDCu83Htsvdpc3op8f5rtPpqdH6ssP4s8z6vMr5s9T8
        ttr+u9X6u93yvNv8uuL917KA2rmb4LWAyLn00b324L31wsC93syz5sqb8cWL8ceQ98uW5sui7Ni39Nqo
        /9Wi9dm1/OS8xMXEyMrRxsj3xdT62Mj11tb5zuDvyeX8yfH93OPp0+Pw0uL81Ov21Or93OT72+z91fjr
        2fT95Mn25tX35NP449r579H36dL469z37N349Nv4+uXF9enV++3U+ezZ/vfV4OX75Ov87eX66e386fzv
        4/P94vz/6/T96Pn+9ej6/fLi+/Xq/vns8vT98/z+/PP7//z0/v7+AAAAAAAAb2LeKwAAAAlwSFlzAAAO
        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
        EfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZB
        EfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBsHFmR6E9YqmtUiEtEFQhLxB
        UIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxB
        UIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLxBUIS8QVCEvEFQhLx9F2XGENYrmrYiEdIG
        QRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIG
        QRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIG
        QRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIG
        QRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIG
        QRHyBkER8gZBEfIGQRHyBkER8gbBrZnbENYrmvYhEdIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHyBkER8gZBEfIGQRHy
        BkER8gZBEfIGQRHyBkER8hYB9+37DwhDmYUIzqjJAAAAAElFTkSuQmCC
</value>
  </data>
</root>