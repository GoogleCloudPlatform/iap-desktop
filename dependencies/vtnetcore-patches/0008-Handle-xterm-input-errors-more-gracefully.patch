From aa7116e8afb2ad649704508ad491fc0810911c31 Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Thu, 16 Dec 2021 09:47:09 +0100
Subject: [PATCH 8/8] Handle xterm input errors more gracefully

- Fix IndexOutOfRangeException when handling an
  ArgumentException
- Throw more specific exception when encountering an
  invalid escape sequence
- Bail out when encountering unknown exceptions while
  parsing input data
---
 VtNetCore.Unit.Tests/VirtualTerminal.cs       | 63 ++++++++++++++++++-
 VtNetCore/XTermParser/DataConsumer.cs         | 29 +++++++--
 .../XTermParser/XTermSequenceHandlers.cs      | 10 +--
 3 files changed, 92 insertions(+), 10 deletions(-)

diff --git a/VtNetCore.Unit.Tests/VirtualTerminal.cs b/VtNetCore.Unit.Tests/VirtualTerminal.cs
index 7235a78..0d659e9 100644
--- a/VtNetCore.Unit.Tests/VirtualTerminal.cs
+++ b/VtNetCore.Unit.Tests/VirtualTerminal.cs
@@ -438,6 +438,67 @@ namespace VtNetCore.Unit.Tests
             Assert.Equal(5, t.Buffer.Count);
         }
 
-
+        [Theory]
+        [InlineData(1)]
+        [InlineData(2)]
+        [InlineData(3)]
+        public void RandomEscapeSequences(int length)
+        {
+            var commonEscapeSequenceCharacters = new[]
+            {
+                '[',
+                ']',
+                'A',
+                'Z',
+                'a',
+                'z',
+                'P',
+                '#',
+                ' ',
+                '%',
+                '(',
+                ')',
+                '*',
+                '+',
+                '-',
+                '.',
+                '/',
+                'Y',
+                '\u0007',
+                '\u009c',
+                '\u001b',
+                '?',
+                '>',
+                '!',
+                ';',
+                '0',
+                '9',
+                '$',
+                '"',
+                '=',
+                '>',
+                '<'
+            };
+
+            void ConsumeSequence(string sequence, int charsToAppend)
+            {
+                if (charsToAppend == 0)
+                {
+                    // This must not throw an exception
+                    var consumer = new DataConsumer(new VirtualTerminalController());
+                    consumer.Push(System.Text.Encoding.UTF8.GetBytes(sequence));
+                }
+                else
+                {
+
+                    foreach (var c in commonEscapeSequenceCharacters)
+                    {
+                        ConsumeSequence(sequence + c, charsToAppend - 1);
+                    }
+                }
+            }
+
+            ConsumeSequence("\u001b", length);
+        }
     }
 }
diff --git a/VtNetCore/XTermParser/DataConsumer.cs b/VtNetCore/XTermParser/DataConsumer.cs
index 155f7e4..85c85ab 100644
--- a/VtNetCore/XTermParser/DataConsumer.cs
+++ b/VtNetCore/XTermParser/DataConsumer.cs
@@ -3,6 +3,7 @@
     using System;
     using System.Diagnostics;
     using System.Text;
+    using VtNetCore.Exceptions;
     using VtNetCore.VirtualTerminal;
 
     /// <summary>
@@ -100,19 +101,39 @@
                 {
                     TraceSource.Write(
                         TraceEventType.Warning,
-                        "Failed to process arguments: {0}",
+                        "Received invalid arguments: {0}",
                         e.ToString());
                     
-                    // We've reached an invalid state of the stream.
-                    InputBuffer.ReadRaw();
+                    // We've reached an invalid state of the stream
+                    if (!InputBuffer.AtEnd)
+                        InputBuffer.ReadRaw();
+
+                    InputBuffer.Commit();
+                }
+                catch (EscapeSequenceException e)
+                {
+                    TraceSource.Write(
+                        TraceEventType.Warning,
+                        "Failed to process escape sequence '{0}': {1}",
+                        e.Sequence,
+                        e);
+
+                    // We've reached an invalid state of the stream
+                    if (!InputBuffer.AtEnd)
+                        InputBuffer.ReadRaw();
+
                     InputBuffer.Commit();
                 }
                 catch (Exception e)
                 {
                     TraceSource.Write(
                         TraceEventType.Error,
-                        "Failed to process sequence: {0}",
+                        "Failed to process xterm input: {0}",
                         e.ToString());
+
+                    throw new InvalidOperationException(
+                        "Failed to process xterm input",
+                        e);
                 }
             }
 
diff --git a/VtNetCore/XTermParser/XTermSequenceHandlers.cs b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
index d4e9499..137099a 100644
--- a/VtNetCore/XTermParser/XTermSequenceHandlers.cs
+++ b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
@@ -1795,7 +1795,7 @@
             {
                 var handler = Handlers.Where(x => x.SequenceType == SequenceHandler.ESequenceType.Character).SingleOrDefault();
                 if (handler == null)
-                    throw new Exception("There are no sequence handlers configured for type CharacterSequence");
+                    throw new EscapeSequenceException("There are no sequence handlers configured for type CharacterSequence", sequence);
 
                 handler.Handler(sequence, controller);
 
@@ -1856,7 +1856,7 @@
                     .SingleOrDefault();
 
                 if (handler == null)
-                    throw new Exception("There are no CsiSequence handlers configured for sequence: " + sequence.ToString());
+                    throw new EscapeSequenceException("There are no CsiSequence handlers configured for sequence: " + sequence.ToString(), sequence);
 
                 // This is necessary since the default value is contextual
                 if(sequence.Parameters != null)
@@ -1876,7 +1876,7 @@
             if (sequence is OscSequence)
             {
                 if (sequence.Parameters == null || sequence.Parameters.Count < 1)
-                    throw new Exception($"OSC sequence doesn't have any parameters {sequence}");
+                    throw new EscapeSequenceException($"OSC sequence doesn't have any parameters {sequence}", sequence);
 
                 var handler = Handlers
                     .Where(x => 
@@ -1898,7 +1898,7 @@
                 }
 
                 if (handler == null)
-                    throw new Exception("There are no sequence handlers configured for type OscSequence with param0 = " + sequence.Parameters[0].ToString());
+                    throw new EscapeSequenceException("There are no sequence handlers configured for type OscSequence with param0 = " + sequence.Parameters[0].ToString(), sequence);
 
                 handler.Handler(sequence, controller);
 
@@ -2003,7 +2003,7 @@
                     .SingleOrDefault();
 
                 if (handler == null)
-                    throw new Exception("There are no sequence handlers configured for type Vt52MoveCursorSequence");
+                    throw new EscapeSequenceException("There are no sequence handlers configured for type Vt52MoveCursorSequence", sequence);
 
                 handler.Handler(sequence, controller);
 
-- 
2.17.1.windows.2

