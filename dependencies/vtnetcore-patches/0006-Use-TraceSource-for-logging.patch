From ebd1634ebe082bcb3d82987eac667927824c7546 Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Wed, 15 Dec 2021 08:23:43 +0100
Subject: [PATCH 6/6] Use TraceSource for logging

* Replace Debug.WriteLine statements
* Replace bespoke logging code

Using TraceSource is more consistent with common .Net
practices and makes it easier for consuming applications
to configure logging.
---
 VtNetCore.Unit.Tests/modifyKeys.cs            |   4 -
 VtNetCore.Unit.Tests/vttestCursorMovement.cs  |   1 -
 VtNetCore.Unit.Tests/vttestVt52.cs            |   2 -
 .../IVirtualTerminalController.cs             |   3 +
 .../VirtualTerminal/TraceSourceExtensions.cs  |  19 ++++
 .../VirtualTerminalController.cs              |  46 +++-----
 VtNetCore/VtNetCore.csproj                    |  15 +++
 VtNetCore/XTermParser/DataConsumer.cs         |  41 ++++---
 .../XTermParser/XTermSequenceHandlers.cs      | 106 ++++++++++++++----
 VtNetCore/XTermParser/XTermSequenceReader.cs  |   2 +-
 10 files changed, 168 insertions(+), 71 deletions(-)
 create mode 100644 VtNetCore/VirtualTerminal/TraceSourceExtensions.cs

diff --git a/VtNetCore.Unit.Tests/modifyKeys.cs b/VtNetCore.Unit.Tests/modifyKeys.cs
index 67c7dbb..8b3ea1d 100644
--- a/VtNetCore.Unit.Tests/modifyKeys.cs
+++ b/VtNetCore.Unit.Tests/modifyKeys.cs
@@ -16,7 +16,6 @@ namespace VtNetCoreUnitTests
         public void SetModifyKeyboard()
         {
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
 
             Push(d, "".CSI() + ">0;8m");
@@ -30,7 +29,6 @@ namespace VtNetCoreUnitTests
         public void SetModifyCursorKeys()
         {
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
 
             Push(d, "".CSI() + ">1;3m");
@@ -44,7 +42,6 @@ namespace VtNetCoreUnitTests
         public void SetModifyFunctionKeys()
         {
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
 
             Push(d, "".CSI() + ">2;1m");
@@ -58,7 +55,6 @@ namespace VtNetCoreUnitTests
         public void SetModifyOtherKeys()
         {
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
 
             Push(d, "".CSI() + ">4;1m");
diff --git a/VtNetCore.Unit.Tests/vttestCursorMovement.cs b/VtNetCore.Unit.Tests/vttestCursorMovement.cs
index 89b5fb6..7aa47ee 100644
--- a/VtNetCore.Unit.Tests/vttestCursorMovement.cs
+++ b/VtNetCore.Unit.Tests/vttestCursorMovement.cs
@@ -72,7 +72,6 @@
         {
             string s;
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
             t.ResizeView(80, 25);
 
diff --git a/VtNetCore.Unit.Tests/vttestVt52.cs b/VtNetCore.Unit.Tests/vttestVt52.cs
index f193397..d5fda96 100644
--- a/VtNetCore.Unit.Tests/vttestVt52.cs
+++ b/VtNetCore.Unit.Tests/vttestVt52.cs
@@ -162,7 +162,6 @@ namespace VtNetCoreUnitTests
         {
             string s;
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
             t.ResizeView(80, 25);
 
@@ -346,7 +345,6 @@ namespace VtNetCoreUnitTests
         public void TextVt52Identify()
         {
             var t = new VirtualTerminalController();
-            t.Debugging = true;
             var d = new DataConsumer(t);
             t.ResizeView(80, 25);
 
diff --git a/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs b/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
index ff6ef48..856230d 100644
--- a/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
@@ -1,5 +1,6 @@
 ﻿namespace VtNetCore.VirtualTerminal
 {
+    using System.Diagnostics;
     using VtNetCore.VirtualTerminal.Enums;
     using VtNetCore.XTermParser;
 
@@ -164,6 +165,8 @@
         ModifyCursorKeysMode ModifyCursorKeys { get; set; }
         ModifyFunctionKeysMode ModifyFunctionKeys { get; set; }
         ModifyOtherKeysMode ModifyOtherKeys { get; set; }
+
+        TraceSource Trace { get; }
     }
 
     public enum ModifyCursorKeysMode
diff --git a/VtNetCore/VirtualTerminal/TraceSourceExtensions.cs b/VtNetCore/VirtualTerminal/TraceSourceExtensions.cs
new file mode 100644
index 0000000..913d1ca
--- /dev/null
+++ b/VtNetCore/VirtualTerminal/TraceSourceExtensions.cs
@@ -0,0 +1,19 @@
+﻿using System.Diagnostics;
+
+namespace VtNetCore.VirtualTerminal
+{
+    internal static class TraceSourceExtensions
+    {
+        public static void Write(
+            this TraceSource source,
+            TraceEventType eventType,
+            string message, 
+            params object[] args)
+        {
+            if (source.Switch.ShouldTrace(eventType))
+            {
+                source.TraceData(eventType, 0, string.Format(message, args));
+            }
+        }
+    }
+}
diff --git a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
index caff1b4..82b1741 100644
--- a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
@@ -2,6 +2,7 @@
 {
     using System;
     using System.Collections.Generic;
+    using System.Diagnostics;
     using System.Linq;
     using System.Text;
     using VtNetCore.VirtualTerminal.Encodings;
@@ -24,6 +25,13 @@
         private ModifyFunctionKeysMode modifyFunctionKeys = ModifyFunctionKeysMode._Default;
         private ModifyOtherKeysMode modifyOtherKeys = ModifyOtherKeysMode._Default;
 
+        /// <summary>
+        /// Diagnostics logs.
+        /// </summary>
+        public static TraceSource TraceSource { get; } = new TraceSource(typeof(VirtualTerminalController).Name);
+
+        public TraceSource Trace => TraceSource;
+
         /// <summary>
         /// Configures the maximum number of lines stored in the history
         /// </summary>
@@ -192,11 +200,6 @@
         /// </summary>
         public bool Vt52AnsiMode { get; set; }
 
-        /// <summary>
-        /// When enabled causes logging to System.Diagnostics.Debug
-        /// </summary>
-        public bool Debugging { get; set; }
-
         /// <summary>
         /// Specifies the visual scrolling region top in base 0
         /// </summary>
@@ -333,11 +336,6 @@
             }
         }
 
-        /// <summary>
-        /// Emits events when log items are generated by this control
-        /// </summary>
-        public EventHandler<TextEventArgs> OnLog;
-
         public int ChangeCount { get; private set; }
 
         public VirtualTerminalViewPort ViewPort { get; private set; }
@@ -839,31 +837,21 @@
             ChangeCount++;
         }
 
-        private void Log(string message)
-        {
-            if (Debugging)
-            {
-                //System.Diagnostics.Debug.WriteLine("Terminal: " + message);
-                OnLog?.Invoke(this, new TextEventArgs { Text = "Terminal: " + message });
-            }
-        }
-
         private void LogController(string message)
         {
-            if (Debugging)
-            {
-                System.Diagnostics.Debug.WriteLine("Controller: " + message);
-                OnLog?.Invoke(this, new TextEventArgs { Text = "Controller: " + message });
-            }
+            TraceSource.Write(
+                TraceEventType.Verbose,
+                "Controller: {0}", message);
         }
 
         private void LogExtreme(string message)
         {
-            if (Debugging)
-            {
-                //System.Diagnostics.Debug.WriteLine("Terminal: (c=" + CursorState.CurrentColumn.ToString() + ",r=" + CursorState.CurrentRow.ToString() + ")" + message);
-                OnLog?.Invoke(this, new TextEventArgs { Text = "Terminal: (c = " + CursorState.CurrentColumn.ToString() + ", r = " + CursorState.CurrentRow.ToString() + ")" + message });
-            }
+            TraceSource.Write(
+                (TraceEventType)((int)TraceEventType.Verbose << 2), // Beyond 'Verbose'
+                "Terminal: (c = {0}, r = {1}) {2}", 
+                CursorState.CurrentColumn, 
+                CursorState.CurrentRow, 
+                message);
         }
 
         public void EnableNationalReplacementCharacterSets(bool enable)
diff --git a/VtNetCore/VtNetCore.csproj b/VtNetCore/VtNetCore.csproj
index 1a78a2c..b0ca834 100644
--- a/VtNetCore/VtNetCore.csproj
+++ b/VtNetCore/VtNetCore.csproj
@@ -18,4 +18,19 @@
     <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
     <PackageReference Include="System.Text.Encoding.Extensions" Version="4.3.0" />
   </ItemGroup>
+  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
+    <PackageReference Include="System.Diagnostics.TraceSource">
+      <Version>4.3.0</Version>
+    </PackageReference>
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
+    <PackageReference Include="System.Diagnostics.TraceSource">
+      <Version>4.3.0</Version>
+    </PackageReference>
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFramework)' == 'net46'">
+    <PackageReference Include="System.Diagnostics.TraceSource">
+      <Version>4.3.0</Version>
+    </PackageReference>
+  </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/VtNetCore/XTermParser/DataConsumer.cs b/VtNetCore/XTermParser/DataConsumer.cs
index 4a25013..155f7e4 100644
--- a/VtNetCore/XTermParser/DataConsumer.cs
+++ b/VtNetCore/XTermParser/DataConsumer.cs
@@ -1,6 +1,7 @@
 ﻿namespace VtNetCore.XTermParser
 {
     using System;
+    using System.Diagnostics;
     using System.Text;
     using VtNetCore.VirtualTerminal;
 
@@ -10,12 +11,9 @@
     public class DataConsumer
     {
         /// <summary>
-        /// Enables logging of received sequences.
+        /// Diagnostics logs.
         /// </summary>
-        /// <remarks>
-        /// When enabled, this adds a tremendous amount of overhead to the terminal. It should only be used for troubleshooting
-        /// </remarks>
-        public bool SequenceDebugging { get; set; }
+        public static TraceSource TraceSource { get; } = new TraceSource(typeof(DataConsumer).Name);
 
         /// <summary>
         /// The buffer to hold state for processing and parsing of incoming data
@@ -59,9 +57,13 @@
             {
                 try
                 {
-                    if (SequenceDebugging && ResumingStarvedBuffer)
+                    if (ResumingStarvedBuffer)
                     {
-                        System.Diagnostics.Debug.WriteLine("Resuming from starved buffer [" + Encoding.UTF8.GetString(InputBuffer.Buffer).Replace("\u001B", "<esc>") + "]");
+                        TraceSource.Write(
+                            TraceEventType.Verbose,
+                            "Resuming from starved buffer '{0}'",
+                            Encoding.UTF8.GetString(InputBuffer.Buffer).Replace("\u001B", "<esc>"));
+
                         ResumingStarvedBuffer = false;
                     }
 
@@ -72,15 +74,19 @@
                     {
                         foreach (var item in sequence.ProcessFirst)
                         {
-                            if (SequenceDebugging)
-                                System.Diagnostics.Debug.WriteLine(item.ToString());
+                            TraceSource.Write(
+                                TraceEventType.Verbose, 
+                                "Processing sequence '{0}'",
+                                item.ToString());
 
                             XTermSequenceHandlers.ProcessSequence(item, Controller);
                         }
                     }
 
-                    if (SequenceDebugging)
-                        System.Diagnostics.Debug.WriteLine(sequence.ToString());
+                    TraceSource.Write(
+                        TraceEventType.Verbose,
+                        "Processing sequence '{0}'",
+                        sequence.ToString());
 
                     XTermSequenceHandlers.ProcessSequence(sequence, Controller);
                 }
@@ -92,16 +98,21 @@
                 }
                 catch (ArgumentException e)
                 {
-                    System.Diagnostics.Debug.WriteLine("Argument exception : " + e.ToString());
+                    TraceSource.Write(
+                        TraceEventType.Warning,
+                        "Failed to process arguments: {0}",
+                        e.ToString());
+                    
                     // We've reached an invalid state of the stream.
                     InputBuffer.ReadRaw();
                     InputBuffer.Commit();
                 }
                 catch (Exception e)
                 {
-                    // This is less than attractive, but until such time as the code is considered highly
-                    // reliable, this is the gateway for where nearly all crashes will be caught.
-                    System.Diagnostics.Debug.WriteLine("Unknown exception " + e.Message);
+                    TraceSource.Write(
+                        TraceEventType.Error,
+                        "Failed to process sequence: {0}",
+                        e.ToString());
                 }
             }
 
diff --git a/VtNetCore/XTermParser/XTermSequenceHandlers.cs b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
index 9c406bd..d4e9499 100644
--- a/VtNetCore/XTermParser/XTermSequenceHandlers.cs
+++ b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
@@ -1,6 +1,7 @@
 ﻿namespace VtNetCore.XTermParser
 {
     using System;
+    using System.Diagnostics;
     using System.Linq;
     using VtNetCore.Exceptions;
     using VtNetCore.VirtualTerminal;
@@ -397,7 +398,10 @@
                                 break;
 
                             default:
-                                System.Diagnostics.Debug.WriteLine("Set Mode (SM) mode: " + parameter.ToString() + " is unknown");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "Set Mode (SM) mode: {0} is unknown",
+                                    parameter.ToString());
                                 break;
                         }
                     }
@@ -521,7 +525,10 @@
                                 break;
 
                             default:
-                                System.Diagnostics.Debug.WriteLine("DEC Private Mode Set (DECSET) mode: " + parameter.ToString() + " is unknown");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "DEC Private Mode Set (DECSET) mode: {0} is unknown",
+                                    parameter.ToString());
                                 break;
                         }
                     }
@@ -577,7 +584,10 @@
                                 break;
 
                             default:
-                                System.Diagnostics.Debug.WriteLine("Reset Mode (RM) mode: " + parameter.ToString() + " is unknown");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "Reset Mode (RM) mode: {0} is unknown",
+                                    parameter.ToString());
                                 break;
                         }
                     }
@@ -701,7 +711,10 @@
                                 break;
 
                             default:
-                                System.Diagnostics.Debug.WriteLine("Reset Mode (RM) mode: " + parameter.ToString() + " is unknown");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "Reset Mode (RM) mode: {0} is unknown",
+                                    parameter.ToString());
                                 break;
                         }
                     }
@@ -744,7 +757,12 @@
                                 controller.SetIso8613PaletteBackground(csiSequence.Parameters[2]);
                         }
                         else
-                            System.Diagnostics.Debug.WriteLine("SGR " + csiSequence.Parameters[0].ToString() + " must be longer than 1 option");
+                        {
+                            controller.Trace.Write(
+                                TraceEventType.Warning,
+                                "SGR {0} must be longer than 1 option",
+                                csiSequence.Parameters[0].ToString());
+                        }
                     }
                     else
                     {
@@ -1077,13 +1095,19 @@
                             if(sequence.Parameters.Count == 3)
                                 controller.XTermMoveWindow(sequence.Parameters[1], sequence.Parameters[2]);
                             else
-                                System.Diagnostics.Debug.WriteLine($"XTermMoveWindow needs 3 parameters {sequence.ToString()}");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "XTermMoveWindow needs 3 parameters {0}",
+                                    sequence.ToString());
                             break;
                         case 4:
                             if(sequence.Parameters.Count == 3)
                                 controller.XTermResizeWindow(sequence.Parameters[2], sequence.Parameters[1]);
                             else
-                                System.Diagnostics.Debug.WriteLine($"XTermResizeWindow needs 3 parameters {sequence.ToString()}");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "XTermResizeWindow needs 3 parameters {0}",
+                                    sequence.ToString());
                             break;
                         case 5:
                             controller.XTermRaiseToFront();
@@ -1098,7 +1122,10 @@
                             if(sequence.Parameters.Count == 3)
                                 controller.XTermResizeTextArea(sequence.Parameters[1], sequence.Parameters[2]);
                             else
-                                System.Diagnostics.Debug.WriteLine($"XTermResizeTextArea needs 3 parameters {sequence.ToString()}");
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "XTermResizeTextArea needs 3 parameters {0}",
+                                    sequence.ToString());
                             break;
                         case 9:
                             if(sequence.Parameters.Count >= 2)
@@ -1118,12 +1145,20 @@
                                         controller.XTermMaximizeWindow(true, false);
                                         break;
                                     default:
-                                        System.Diagnostics.Debug.WriteLine($"Unknown window maximize mode operation {sequence.ToString()}");
+                                        controller.Trace.Write(
+                                            TraceEventType.Warning,
+                                            "Unknown window maximize mode operation {0}",
+                                            sequence.ToString());
                                         break;
                                 }
                             }
                             else
-                                System.Diagnostics.Debug.WriteLine($"Window maximize mode operation requires 2 parameters {sequence.ToString()}");
+                            {
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "Window maximize mode operation requires 2 parameters {0}",
+                                    sequence.ToString());
+                            }
                             break;
                         case 10:
                             if(sequence.Parameters.Count >= 2)
@@ -1140,12 +1175,20 @@
                                         controller.XTermFullScreenToggle();
                                         break;
                                     default:
-                                        System.Diagnostics.Debug.WriteLine($"Unknown full screen mode operation {sequence.ToString()}");
+                                        controller.Trace.Write(
+                                            TraceEventType.Warning,
+                                            "Unknown full screen mode operation {0}",
+                                            sequence.ToString());
                                         break;
                                 }
                             }
                             else
-                                System.Diagnostics.Debug.WriteLine($"Window full screen mode operation requires 2 parameters {sequence.ToString()}");
+                            {
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "Window full screen mode operation requires 2 parameters {0}",
+                                    sequence.ToString());
+                            }
                             break;
                         case 11:
                         case 13:
@@ -1174,12 +1217,20 @@
                                         controller.PushXTermWindowTitle();
                                         break;
                                     default:
-                                        System.Diagnostics.Debug.WriteLine($"Unknown save window title or icon sequence {sequence.ToString()}");
+                                        controller.Trace.Write(
+                                            TraceEventType.Warning,
+                                            "Unknown save window title or icon sequence {0}",
+                                            sequence.ToString());
                                         break;
                                 }
                             }
                             else
-                                System.Diagnostics.Debug.WriteLine($"XTerm Icon/Title operation requires 2 parameters {sequence.ToString()}");
+                            {
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "XTerm Icon/Title operation requires 2 parameters {0}",
+                                    sequence.ToString());
+                            }
                             break;
                         case 23:
                             if(sequence.Parameters.Count >= 2)
@@ -1197,19 +1248,33 @@
                                         controller.PopXTermWindowTitle();
                                         break;
                                     default:
-                                        System.Diagnostics.Debug.WriteLine($"Unknown restore window title or icon sequence {sequence.ToString()}");
+                                        controller.Trace.Write(
+                                            TraceEventType.Warning,
+                                            "Unknown restore window title or icon sequence {0}",
+                                            sequence.ToString());
                                         break;
                                 }
                             }
                             else
-                                System.Diagnostics.Debug.WriteLine($"XTerm Icon/Title operation requires 2 parameters {sequence.ToString()}");
+                            {
+                                controller.Trace.Write(
+                                    TraceEventType.Warning,
+                                    "XTerm Icon/Title operation requires 2 parameters {0}",
+                                    sequence.ToString());
+                            }
                             break;
                         case 24:
                             // TODO : Consider just ignoring this feature... I can't imagine it being overly useful.
-                            System.Diagnostics.Debug.WriteLine($"(Not implemented) Resize to Ps lines (DECSLPP) {sequence.ToString()}");
+                            controller.Trace.Write(
+                                TraceEventType.Warning,
+                                "(Not implemented) Resize to Ps lines (DECSLPP) {0}",
+                                sequence.ToString());
                             break;
                         default:
-                            System.Diagnostics.Debug.WriteLine($"Unknown DTTerm/XTerm window manipulation sequence {sequence.ToString()}");
+                            controller.Trace.Write(
+                                TraceEventType.Warning,
+                                "Unknown DTTerm/XTerm window manipulation sequence {0}",
+                                sequence.ToString());
                             break;
                     }
                 }
@@ -1945,7 +2010,10 @@
                 return;
             }
 
-            System.Diagnostics.Debug.WriteLine("Unhandled sequence -> " + sequence.ToString());
+            controller.Trace.Write(
+                TraceEventType.Error,
+                "Unhandled sequence -> {0}",
+                sequence.ToString());
         }
     }
 }
diff --git a/VtNetCore/XTermParser/XTermSequenceReader.cs b/VtNetCore/XTermParser/XTermSequenceReader.cs
index cf22868..37a2fb0 100644
--- a/VtNetCore/XTermParser/XTermSequenceReader.cs
+++ b/VtNetCore/XTermParser/XTermSequenceReader.cs
@@ -460,7 +460,7 @@
 
                     stream.Commit();
 
-                    System.Diagnostics.Debug.WriteLine(vt52mc.ToString());
+                    // System.Diagnostics.Debug.WriteLine(vt52mc.ToString());
                     return vt52mc;
 
                 default:
-- 
2.17.1.windows.2

