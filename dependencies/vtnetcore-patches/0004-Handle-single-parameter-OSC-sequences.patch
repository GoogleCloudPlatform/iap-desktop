From 36ffe30199b5b176887a0d04502f51cd0578261d Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Fri, 28 May 2021 08:46:32 +0200
Subject: [PATCH 4/4] Handle single-parameter OSC sequences

* Extend XtermSequenceReader to parse single-parameter OSC sequence
* Extend SequenceHandler to handle foreground/background color resets
---
 VtNetCore.Unit.Tests/Curses.cs                |  5 ++++
 .../libvtermStateTerminalProperties.cs        | 26 +++++++++++++++++++
 .../IVirtualTerminalController.cs             |  2 ++
 .../VirtualTerminalController.cs              | 10 +++++++
 .../XTermParser/XTermSequenceHandlers.cs      | 16 ++++++++++++
 VtNetCore/XTermParser/XTermSequenceReader.cs  |  8 ++++++
 6 files changed, 67 insertions(+)

diff --git a/VtNetCore.Unit.Tests/Curses.cs b/VtNetCore.Unit.Tests/Curses.cs
index c44b864..dfb636f 100644
--- a/VtNetCore.Unit.Tests/Curses.cs
+++ b/VtNetCore.Unit.Tests/Curses.cs
@@ -17,6 +17,11 @@ namespace VtNetCoreUnitTests
             return x + ESC() + '[';
         }
 
+        public static string OSC(this string x, int ps)
+        {
+            return x + ESC() + ']' + ps.ToString() + "\u0007";
+        }
+
         public static string OSC(this string x, int ps, string text)
         {
             return x + ESC() + ']' + ps.ToString() + ";" + text + "\u0007";
diff --git a/VtNetCore.Unit.Tests/libvtermStateTerminalProperties.cs b/VtNetCore.Unit.Tests/libvtermStateTerminalProperties.cs
index 67829bb..6413c76 100644
--- a/VtNetCore.Unit.Tests/libvtermStateTerminalProperties.cs
+++ b/VtNetCore.Unit.Tests/libvtermStateTerminalProperties.cs
@@ -137,5 +137,31 @@
             Push(d, "".ChangeWindowTitle("Here is my title"));
             Assert.Equal("Here is my title", windowTitle);
         }
+
+        [Fact]
+        public void ResetTextForegroundColor()
+        {
+            var t = new VirtualTerminalController();
+            var d = new DataConsumer(t);
+            t.ResizeView(80, 25);
+            t.SetRgbForegroundColor(1, 2, 3);
+            Assert.NotNull(t.CursorState.Attributes.ForegroundRgb);
+
+            Push(d, "".OSC(110));
+            Assert.Null(t.CursorState.Attributes.ForegroundRgb);
+        }
+
+        [Fact]
+        public void ResetTextBackgroundColor()
+        {
+            var t = new VirtualTerminalController();
+            var d = new DataConsumer(t);
+            t.ResizeView(80, 25);
+            t.SetRgbBackgroundColor(1, 2, 3);
+            Assert.NotNull(t.CursorState.Attributes.BackgroundRgb);
+
+            Push(d, "".OSC(111));
+            Assert.Null(t.CursorState.Attributes.BackgroundRgb);
+        }
     }
 }
diff --git a/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs b/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
index 356c98c..ff6ef48 100644
--- a/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/IVirtualTerminalController.cs
@@ -118,8 +118,10 @@
         void SetKeypadType(EKeypadType type);
         void SetRgbBackgroundColor(int red, int green, int blue);
         void SetRgbBackgroundColor(string xParseColor);
+        void ResetRgbForegroundColor();
         void SetRgbForegroundColor(int red, int green, int blue);
         void SetRgbForegroundColor(string xParseColor);
+        void ResetRgbBackgroundColor();
         void SetScrollingRegion(int top, int bottom);
         void SetSendFocusInAndFocusOutEvents(bool enabled);
         void SetStartOfGuardedArea();
diff --git a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
index 583f562..caff1b4 100644
--- a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
@@ -1726,6 +1726,11 @@
                 CursorState.Attributes.ForegroundRgb.Set(xParseColor);
         }
 
+        public void ResetRgbForegroundColor()
+        {
+            CursorState.Attributes.ForegroundRgb = null;
+        }
+
         public void SetRgbBackgroundColor(string xParseColor)
         {
             LogController($"SetRgbBackgroundColor(xParseColor={xParseColor})");
@@ -1736,6 +1741,11 @@
                 CursorState.Attributes.BackgroundRgb.Set(xParseColor);
         }
 
+        public void ResetRgbBackgroundColor()
+        {
+            CursorState.Attributes.BackgroundRgb = null;
+        }
+
         public void SetIso8613PaletteForeground(int paletteEntry)
         {
             LogController("SetIso8613PaletteForeground(e:" + paletteEntry + ")");
diff --git a/VtNetCore/XTermParser/XTermSequenceHandlers.cs b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
index c368ec0..6a78250 100644
--- a/VtNetCore/XTermParser/XTermSequenceHandlers.cs
+++ b/VtNetCore/XTermParser/XTermSequenceHandlers.cs
@@ -238,6 +238,22 @@
                 Handler = (sequence, controller) => controller.ReportRgbBackgroundColor()
             },
             new SequenceHandler
+            {
+                Description = "Reset VT100 text foreground color.",
+                SequenceType = SequenceHandler.ESequenceType.OSC,
+                Param0 = new int [] { 110 },
+                OscText = string.Empty,
+                Handler = (sequence, controller) => controller.ResetRgbForegroundColor()
+            },
+            new SequenceHandler
+            {
+                Description = "Reset VT100 text background color.",
+                SequenceType = SequenceHandler.ESequenceType.OSC,
+                Param0 = new int [] { 111 },
+                OscText = string.Empty,
+                Handler = (sequence, controller) => controller.ResetRgbBackgroundColor()
+            },
+            new SequenceHandler
             {
                 Description = "Insert Ps (Blank) Character(s) (default = 1)",
                 SequenceType = SequenceHandler.ESequenceType.CSI,
diff --git a/VtNetCore/XTermParser/XTermSequenceReader.cs b/VtNetCore/XTermParser/XTermSequenceReader.cs
index 1e55f21..cf22868 100644
--- a/VtNetCore/XTermParser/XTermSequenceReader.cs
+++ b/VtNetCore/XTermParser/XTermSequenceReader.cs
@@ -178,6 +178,14 @@
                             currentParameter = Convert.ToInt32(next - '0');
                         else
                             currentParameter = (currentParameter * 10) + Convert.ToInt32(next - '0');
+
+                        // If Ps is in 110..119 range, there is no second parameter or command.
+                        if (currentParameter >= 110 && currentParameter <= 119)
+                        {
+                            Parameters.Add(currentParameter);
+                            currentParameter = -1;
+                            readingCommand = true;
+                        }
                     }
                     else if (next == '$' || next == '"' || next == ' ')
                     {
-- 
2.17.1.windows.2

