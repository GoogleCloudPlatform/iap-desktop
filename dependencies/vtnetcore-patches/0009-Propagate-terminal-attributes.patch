From 3dbe06e619c9761a345d63594457bffa536f8a73 Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Mon, 11 Jul 2022 09:11:08 +1000
Subject: [PATCH 09/10] Propagate terminal attributes

Refactor TerminalAttributes, TerminalCursorState to ensure
that the terminal attributes are properly propagated and
not accidentally reset to defaults.
---
 .../Model/TerminalAttribute.cs                |  6 +++
 .../Model/TerminalCharacter.cs                | 12 ++++--
 .../VirtualTerminal/TerminalCursorState.cs    | 10 +++--
 .../VirtualTerminalController.cs              | 43 +++++++++----------
 4 files changed, 41 insertions(+), 30 deletions(-)

diff --git a/VtNetCore/VirtualTerminal/Model/TerminalAttribute.cs b/VtNetCore/VirtualTerminal/Model/TerminalAttribute.cs
index b6a44b6..130b713 100644
--- a/VtNetCore/VirtualTerminal/Model/TerminalAttribute.cs
+++ b/VtNetCore/VirtualTerminal/Model/TerminalAttribute.cs
@@ -20,6 +20,12 @@
             (ushort)ETerminalColor.White |     // ForegroundColor
             (ushort)ETerminalColor.Black;      // BackgroundColor
 
+        private TerminalAttribute()
+        {
+        }
+
+        public static TerminalAttribute CreateDefault() => new TerminalAttribute();
+
         public TerminalColor ForegroundRgb { get; set; }
 
         public TerminalColor BackgroundRgb { get; set; }
diff --git a/VtNetCore/VirtualTerminal/Model/TerminalCharacter.cs b/VtNetCore/VirtualTerminal/Model/TerminalCharacter.cs
index bbe0cfb..3548f21 100644
--- a/VtNetCore/VirtualTerminal/Model/TerminalCharacter.cs
+++ b/VtNetCore/VirtualTerminal/Model/TerminalCharacter.cs
@@ -18,7 +18,12 @@
         /// <summary>
         /// The attributes to apply to the character
         /// </summary>
-        public TerminalAttribute Attributes { get; set; } = new TerminalAttribute();
+        public TerminalAttribute Attributes { get; set; }
+
+        public TerminalCharacter(TerminalAttribute attributes)
+        {
+            Attributes = attributes;
+        }
 
         /// <summary>
         /// Deep copy/clone
@@ -27,11 +32,10 @@
         /// TODO : Implement ICloneable
         public TerminalCharacter Clone()
         {
-            return new TerminalCharacter
+            return new TerminalCharacter(Attributes.Clone())
             {
                 Char = Char,
-                CombiningCharacters = CombiningCharacters,
-                Attributes = Attributes.Clone()
+                CombiningCharacters = CombiningCharacters
             };
         }
     }
diff --git a/VtNetCore/VirtualTerminal/TerminalCursorState.cs b/VtNetCore/VirtualTerminal/TerminalCursorState.cs
index 275c61e..07dc52e 100644
--- a/VtNetCore/VirtualTerminal/TerminalCursorState.cs
+++ b/VtNetCore/VirtualTerminal/TerminalCursorState.cs
@@ -33,7 +33,7 @@
         /// <summary>
         /// The current drawing attribute for text.
         /// </summary>
-        public TerminalAttribute Attributes { get; set; } = new TerminalAttribute();
+        public TerminalAttribute Attributes { get; }
 
         /// <summary>
         /// Specifies whether to show the text cursor
@@ -158,18 +158,22 @@
         /// </summary>
         public bool NationalCharacterReplacementMode { get; set; }
 
+        public TerminalCursorState(TerminalAttribute attributes)
+        {
+            Attributes = attributes;
+        }
+
         /// <summary>
         /// Deep copy
         /// </summary>
         /// <returns>A deep copy of the state</returns>
         public TerminalCursorState Clone()
         {
-            return new TerminalCursorState
+            return new TerminalCursorState(Attributes.Clone())
             {
                 CurrentColumn = CurrentColumn,
                 CurrentRow = CurrentRow,
                 ApplicationCursorKeysMode = ApplicationCursorKeysMode,
-                Attributes = Attributes.Clone(),
                 TabStops = TabStops.ToList(),
                 WordWrap = WordWrap,
                 ReverseVideoMode = ReverseVideoMode,
diff --git a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
index 82b1741..75981bd 100644
--- a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
@@ -48,7 +48,7 @@
         /// the value of the color. The colors set here are the colors which were applied during the
         /// last screen erase.
         /// </remarks>
-        public TerminalAttribute NullAttribute = new TerminalAttribute();
+        public TerminalAttribute NullAttribute = TerminalAttribute.CreateDefault();
 
         /// <summary>
         /// The current buffer
@@ -103,7 +103,7 @@
         /// <summary>
         /// The current state of all cursor and attribute properties
         /// </summary>
-        public TerminalCursorState CursorState { get; set; } = new TerminalCursorState();
+        public TerminalCursorState CursorState { get; set; }
 
         public bool HighlightMouseTracking { get; set; }
 
@@ -295,6 +295,8 @@
         {
             Buffer = normalBuffer;
             ViewPort = new VirtualTerminalViewPort(this);
+
+            CursorState = new TerminalCursorState(NullAttribute);
         }
 
         /// <summary>
@@ -559,8 +561,6 @@
                         }
                     };
 
-            var currentAttribute = new TerminalAttribute();
-
             if (lineCount == -1)
                 lineCount = Buffer.Count - startingLine;
 
@@ -569,7 +569,7 @@
                 var sourceLine = GetLine(y + startingLine);
                 var sourceChar = (sourceLine == null || sourceLine.Count == 0) ? null : sourceLine[0];
 
-                currentAttribute = sourceChar == null ? NullAttribute : ((CursorState.ReverseVideoMode ^ invertedRange.Contains(0, y+ startingLine) ^ sourceChar.Attributes.Reverse) ? sourceChar.Attributes.Inverse : sourceChar.Attributes);
+                var currentAttribute = sourceChar == null ? NullAttribute : ((CursorState.ReverseVideoMode ^ invertedRange.Contains(0, y+ startingLine) ^ sourceChar.Attributes.Reverse) ? sourceChar.Attributes.Inverse : sourceChar.Attributes);
 
                 var currentRow = new Layout.LayoutRow
                 {
@@ -659,7 +659,7 @@
         {
             get
             {
-                var currentAttribute = new TerminalAttribute();
+                var currentAttribute = TerminalAttribute.CreateDefault();
 
                 string result = "";
 
@@ -811,8 +811,8 @@
             ActiveBuffer = EActiveBuffer.Normal;
 
             SavedCursorState = null;
-            CursorState = new TerminalCursorState();
-            NullAttribute = new TerminalAttribute();
+            NullAttribute = TerminalAttribute.CreateDefault();
+            CursorState = new TerminalCursorState(NullAttribute);
 
             ScrollTop = 0;
             ScrollBottom = -1;
@@ -1048,10 +1048,9 @@
 
             if (line == null || x >= line.Count)
             {
-                return new TerminalCharacter
+                return new TerminalCharacter(NullAttribute.Clone())
                 {
-                    Char = ' ',
-                    Attributes = NullAttribute.Clone()
+                    Char = ' '
                 };
             }
 
@@ -1568,9 +1567,9 @@
 
                 var line = Buffer[TopRow + CursorState.CurrentRow];
                 while (line.Count < CursorState.CurrentColumn)
-                    line.Add(new TerminalCharacter());
+                    line.Add(new TerminalCharacter(NullAttribute.Clone()));
 
-                line.Insert(CursorState.CurrentColumn, new TerminalCharacter());
+                line.Insert(CursorState.CurrentColumn, new TerminalCharacter(NullAttribute.Clone()));
             }
 
             if (CursorState.CurrentColumn >= CurrentLineColumns && CursorState.WordWrap)
@@ -1942,7 +1941,7 @@
 
         public void ScreenAlignmentTest()
         {
-            var attribute = new TerminalAttribute();
+            var attribute = NullAttribute.Clone();
             for (var y = 0; y < VisibleRows; y++)
                 for (var x = 0; x < VisibleColumns; x++)
                     SetCharacter(x, y, 'E', attribute);
@@ -2226,10 +2225,9 @@
             while (line.Count < Columns)
             {
                 line.Add(
-                    new TerminalCharacter
+                    new TerminalCharacter(CursorState.Attributes)
                     {
-                        Char = ' ',
-                        Attributes = CursorState.Attributes
+                        Char = ' '
                     }
                 );
             }
@@ -2362,7 +2360,7 @@
 
             var line = Buffer[row];
             while (line.Count < CursorState.CurrentColumn)
-                line.Add(new TerminalCharacter { Attributes = NullAttribute.Clone() } );
+                line.Add(new TerminalCharacter(NullAttribute.Clone()) ); // XXX: Use CursorState.Attributes?
 
             var removeAt = Columns;
             if (LeftAndRightMarginEnabled)
@@ -2370,7 +2368,7 @@
 
             for (var i = 0; i < count; i++)
             {
-                line.Insert(CursorState.CurrentColumn, new TerminalCharacter { Attributes = NullAttribute.Clone() } );
+                line.Insert(CursorState.CurrentColumn, new TerminalCharacter(NullAttribute.Clone()) ); // XXX: Use CursorState.Attributes?
 
                 if (removeAt < line.Count)
                     line.RemoveAt(removeAt);
@@ -2408,10 +2406,9 @@
                 {
                     line.Insert(
                         insertAt,
-                        new TerminalCharacter
+                        new TerminalCharacter(line[insertAt - 1].Attributes)
                         {
-                            Char = ' ',
-                            Attributes = line[insertAt - 1].Attributes
+                            Char = ' '
                         }
                     );
                 }
@@ -2799,7 +2796,7 @@
 
             var line = Buffer[currentRow + TopRow];
             while (line.Count < (currentColumn + 1))
-                line.Add(new TerminalCharacter { Char = ' ', Attributes = NullAttribute.Clone() });
+                line.Add(new TerminalCharacter(NullAttribute.Clone()) { Char = ' ' });
 
             var character = line[currentColumn];
             if ((GuardedArea == null && overwriteProtected) || (!overwriteProtected && character.Attributes.Protected != 1) || (GuardedArea != null && !GuardedArea.Contains(currentColumn, currentRow)))
-- 
2.36.0.windows.1

