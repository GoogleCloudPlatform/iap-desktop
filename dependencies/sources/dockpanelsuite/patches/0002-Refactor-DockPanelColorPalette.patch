From 2cdc076c7c5300ca226a249848f7ebe389803c1d Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Thu, 16 Feb 2023 14:37:02 +1100
Subject: [PATCH 2/2] Refactor DockPanelColorPalette

Allow applications to derive from DockPanelColorPalette
so that they can customize the way themes are loaded.
---
 WinFormsUI/Docking/DockPanelColorPalette.cs   | 349 +++++++++++++++---
 WinFormsUI/ThemeVS2012.csproj                 |   1 -
 .../ThemeVS2012/VS2012PaletteFactory.cs       | 203 ----------
 WinFormsUI/ThemeVS2012/VS2012ThemeBase.cs     |   8 +-
 WinFormsUI/ThemeVS2013.csproj                 |   1 -
 WinFormsUI/ThemeVS2013/VS2013ThemeBase.cs     |   9 +-
 WinFormsUI/ThemeVS2015.csproj                 |   1 -
 WinFormsUI/ThemeVS2015/VS2015ThemeBase.cs     |   9 +-
 8 files changed, 322 insertions(+), 259 deletions(-)
 delete mode 100644 WinFormsUI/ThemeVS2012/VS2012PaletteFactory.cs

diff --git a/WinFormsUI/Docking/DockPanelColorPalette.cs b/WinFormsUI/Docking/DockPanelColorPalette.cs
index 52f3a97..bd41e8a 100644
--- a/WinFormsUI/Docking/DockPanelColorPalette.cs
+++ b/WinFormsUI/Docking/DockPanelColorPalette.cs
@@ -1,62 +1,317 @@
 ï»¿using System.Drawing;
 using System.IO;
 using System.Linq;
-using System.Windows.Forms;
 using System.Xml.Linq;
 
 namespace WeifenLuo.WinFormsUI.Docking
 {
     public class DockPanelColorPalette
     {
-        public DockPanelColorPalette(IPaletteFactory factory)
+        private const string Env = "Environment";
+
+        protected static Color ColorTranslatorFromHtml(XDocument xml, string name, bool foreground = false)
+        {
+            var color = xml.Root.Element("Theme")
+                .Elements("Category").FirstOrDefault(item => item.Attribute("Name").Value == Env)?
+                .Elements("Color").FirstOrDefault(item => item.Attribute("Name").Value == name)?
+                .Element(foreground ? "Foreground" : "Background").Attribute("Source").Value;
+            if (color == null)
+            {
+                return Color.Transparent;
+            }
+
+            return ColorTranslator.FromHtml($"#{color}");
+        }
+
+        public DockPanelColorPalette(byte[] resources)
+            : this(XDocument.Load(new StreamReader(new MemoryStream(resources))))
+        { }
+
+        protected DockPanelColorPalette(XDocument xml)
         {
-            factory.Initialize(this);
+            this.AutoHideStripDefault = new AutoHideStripPalette() {
+                Background = ColorTranslatorFromHtml(xml, "AutoHideTabBackgroundBegin"),
+                Border = ColorTranslatorFromHtml(xml, "AutoHideTabBorder"),
+                Text = ColorTranslatorFromHtml(xml, "AutoHideTabText"),
+            };
+            this.AutoHideStripHovered = new AutoHideStripPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "AutoHideTabMouseOverBackgroundBegin"),
+                Border = ColorTranslatorFromHtml(xml, "AutoHideTabMouseOverBorder"),
+                Text = ColorTranslatorFromHtml(xml, "AutoHideTabMouseOverText"),
+            };
+            this.OverflowButtonDefault = new ButtonPalette() {
+                Glyph = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonGlyph"),
+            };
+            this.OverflowButtonHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseOverBackground"),
+                Border = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseOverBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseOverGlyph"),
+            };
+            this.OverflowButtonPressed = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseDownBackground"),
+                Border = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseDownBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "DocWellOverflowButtonMouseDownGlyph"),
+            };
+            this.TabSelectedActive = new TabPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabSelectedBorder"),
+                Button = ColorTranslatorFromHtml(xml, "FileTabButtonSelectedActiveGlyph"),
+                Text = ColorTranslatorFromHtml(xml, "FileTabSelectedText"),
+            };
+            this.TabSelectedInactive = new TabPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabInactiveBorder"),
+                Button = ColorTranslatorFromHtml(xml, "FileTabButtonSelectedInactiveGlyph"),
+                Text = ColorTranslatorFromHtml(xml, "FileTabInactiveText"),
+            };
+            this.TabUnselected = new UnselectedTabPalette()
+            {
+                Text = ColorTranslatorFromHtml(xml, "FileTabText"),
+                Background = ColorTranslatorFromHtml(xml, "FileTabBackground"),
+            };
+            this.TabUnselectedHovered = new TabPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabHotBorder"),
+                Button = ColorTranslatorFromHtml(xml, "FileTabHotGlyph"),
+                Text = ColorTranslatorFromHtml(xml, "FileTabHotText"),
+            };
+            this.TabButtonSelectedActiveHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedActive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedActiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedActiveGlyph"),
+            };
+            this.TabButtonSelectedActivePressed = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedActive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedActiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedActiveGlyph"),
+            };
+            this.TabButtonSelectedInactiveHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedInactive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedInactiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonHoverSelectedInactiveGlyph"),
+            };
+            this.TabButtonSelectedInactivePressed = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedInactive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedInactiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonDownSelectedInactiveGlyph"),
+            };
+            this.TabButtonUnselectedTabHoveredButtonHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonHoverInactive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonHoverInactiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonHoverInactiveGlyph"),
+            };
+            this.TabButtonUnselectedTabHoveredButtonPressed = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "FileTabButtonDownInactive"),
+                Border = ColorTranslatorFromHtml(xml, "FileTabButtonDownInactiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "FileTabButtonDownInactiveGlyph"),
+            };
+            this.MainWindowActive = new MainWindowPalette() {
+                Background = ColorTranslatorFromHtml(xml, "EnvironmentBackground"),
+            };
+            this.MainWindowStatusBarDefault = new MainWindowStatusBarPalette() {
+                Background = ColorTranslatorFromHtml(xml, "StatusBarDefault"),
+                Highlight = ColorTranslatorFromHtml(xml, "StatusBarHighlight"),
+                HighlightText = ColorTranslatorFromHtml(xml, "StatusBarHighlight", true),
+                ResizeGrip = ColorTranslatorFromHtml(xml, "MainWindowResizeGripTexture1"),
+                ResizeGripAccent = ColorTranslatorFromHtml(xml, "MainWindowResizeGripTexture2"),
+                Text = ColorTranslatorFromHtml(xml, "StatusBarText"),
+            };
+            this.ToolWindowCaptionActive = new ToolWindowCaptionPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "TitleBarActiveBorder"),
+                Button = ColorTranslatorFromHtml(xml, "ToolWindowButtonActiveGlyph"),
+                Grip = ColorTranslatorFromHtml(xml, "TitleBarDragHandleActive"),
+                Text = ColorTranslatorFromHtml(xml, "TitleBarActiveText"),
+            };
+            this.ToolWindowCaptionInactive = new ToolWindowCaptionPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "TitleBarInactive"),
+                Button = ColorTranslatorFromHtml(xml, "ToolWindowButtonInactiveGlyph"),
+                Grip = ColorTranslatorFromHtml(xml, "TitleBarDragHandle"),
+                Text = ColorTranslatorFromHtml(xml, "TitleBarInactiveText"),
+            };
+            this.ToolWindowCaptionButtonActiveHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverActive"),
+                Border = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverActiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverActiveGlyph"),
+            };
+            this.ToolWindowCaptionButtonPressed = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowButtonDown"),
+                Border = ColorTranslatorFromHtml(xml, "ToolWindowButtonDownBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "ToolWindowButtonDownActiveGlyph"),
+            };
+            this.ToolWindowCaptionButtonInactiveHovered = new HoveredButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverInactive"),
+                Border = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverInactiveBorder"),
+                Glyph = ColorTranslatorFromHtml(xml, "ToolWindowButtonHoverInactiveGlyph"),
+            };
+            this.ToolWindowTabSelectedActive = new ToolWindowTabPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowTabSelectedTab"),
+                Text = ColorTranslatorFromHtml(xml, "ToolWindowTabSelectedActiveText"),
+            };
+            this.ToolWindowTabSelectedInactive = new ToolWindowTabPalette()
+            {
+                Background = ToolWindowTabSelectedActive.Background,
+                Text = ColorTranslatorFromHtml(xml, "ToolWindowTabSelectedText"),
+            };
+            this.ToolWindowTabUnselected = new ToolWindowUnselectedTabPalette()
+            {
+                Text = ColorTranslatorFromHtml(xml, "ToolWindowTabText"),
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowTabGradientBegin"),
+            };
+            this.ToolWindowTabUnselectedHovered = new ToolWindowTabPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "ToolWindowTabMouseOverBackgroundBegin"),
+                Text = ColorTranslatorFromHtml(xml, "ToolWindowTabMouseOverText"),
+            };
+            this.ToolWindowBorder = ColorTranslatorFromHtml(xml, "ToolWindowBorder");
+            this.ToolWindowSeparator = ColorTranslatorFromHtml(xml, "ToolWindowTabSeparator");
+            this.DockTarget = new DockTargetPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "DockTargetBackground"),
+                Border = ColorTranslatorFromHtml(xml, "DockTargetBorder"),
+                ButtonBackground = ColorTranslatorFromHtml(xml, "DockTargetButtonBackgroundBegin"),
+                ButtonBorder = ColorTranslatorFromHtml(xml, "DockTargetButtonBorder"),
+                GlyphBackground = ColorTranslatorFromHtml(xml, "DockTargetGlyphBackgroundBegin"),
+                GlyphArrow = ColorTranslatorFromHtml(xml, "DockTargetGlyphArrow"),
+                GlyphBorder = ColorTranslatorFromHtml(xml, "DockTargetGlyphBorder"),
+            };
+            this.CommandBarMenuDefault = new CommandBarMenuPalette() {
+                Background = ColorTranslatorFromHtml(xml, "CommandShelfHighlightGradientBegin"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextActive"),
+            };
+            this.CommandBarMenuPopupDefault = new CommandBarMenuPopupPalette() {
+                Arrow = ColorTranslatorFromHtml(xml, "CommandBarMenuSubmenuGlyph"),
+                BackgroundBottom = ColorTranslatorFromHtml(xml, "CommandBarMenuBackgroundGradientEnd"),
+                BackgroundTop = ColorTranslatorFromHtml(xml, "CommandBarMenuBackgroundGradientBegin"),
+                Border = ColorTranslatorFromHtml(xml, "CommandBarMenuBorder"),
+                Checkmark = ColorTranslatorFromHtml(xml, "CommandBarCheckBox"),
+                CheckmarkBackground = ColorTranslatorFromHtml(xml, "CommandBarSelectedIcon"),
+                IconBackground = ColorTranslatorFromHtml(xml, "CommandBarMenuIconBackground"),
+                Separator = ColorTranslatorFromHtml(xml, "CommandBarMenuSeparator"),
+            };
+            this.CommandBarMenuPopupDisabled = new CommandBarMenuPopupDisabledPalette()
+            {
+                Checkmark = ColorTranslatorFromHtml(xml, "CommandBarCheckBoxDisabled"),
+                CheckmarkBackground = ColorTranslatorFromHtml(xml, "CommandBarSelectedIconDisabled"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextInactive"),
+            };
+            this.CommandBarMenuPopupHovered = new CommandBarMenuPopupHoveredPalette()
+            {
+                Arrow = ColorTranslatorFromHtml(xml, "CommandBarMenuMouseOverSubmenuGlyph"),
+                Checkmark = ColorTranslatorFromHtml(xml, "CommandBarCheckBoxMouseOver"),
+                CheckmarkBackground = ColorTranslatorFromHtml(xml, "CommandBarHoverOverSelectedIcon"),
+                ItemBackground = ColorTranslatorFromHtml(xml, "CommandBarMenuItemMouseOver"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarMenuItemMouseOver", true),
+            };
+            this.CommandBarMenuTopLevelHeaderHovered = new CommandBarMenuTopLevelHeaderPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "CommandBarMouseOverBackgroundBegin"),
+                Border = ColorTranslatorFromHtml(xml, "CommandBarBorder"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextHover"),
+            };
+            this.CommandBarToolbarDefault = new CommandBarToolbarPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "CommandBarGradientBegin"),
+                Border = ColorTranslatorFromHtml(xml, "CommandBarToolBarBorder"),
+                Grip = ColorTranslatorFromHtml(xml, "CommandBarDragHandle"),
+                OverflowButtonBackground = ColorTranslatorFromHtml(xml, "CommandBarOptionsBackground"),
+                OverflowButtonGlyph = ColorTranslatorFromHtml(xml, "CommandBarOptionsGlyph"),
+                Separator = ColorTranslatorFromHtml(xml, "CommandBarToolBarSeparator"),
+                SeparatorAccent = ColorTranslatorFromHtml(xml, "CommandBarToolBarSeparatorHighlight"),
+                Tray = ColorTranslatorFromHtml(xml, "CommandShelfBackgroundGradientBegin"),
+            };
+            this.CommandBarToolbarButtonChecked = new CommandBarToolbarButtonCheckedPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "CommandBarSelected"),
+                Border = ColorTranslatorFromHtml(xml, "CommandBarSelectedBorder"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextSelected"),
+            };
+            this.CommandBarToolbarButtonCheckedHovered = new CommandBarToolbarButtonCheckedHoveredPalette()
+            {
+                Border = ColorTranslatorFromHtml(xml, "CommandBarHoverOverSelectedIconBorder"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextHoverOverSelected"),
+            };
+            this.CommandBarToolbarButtonDefault = new CommandBarToolbarButtonPalette()
+            {
+                Arrow = ColorTranslatorFromHtml(xml, "DropDownGlyph"),
+            };
+            this.CommandBarToolbarButtonHovered = new CommandBarToolbarButtonHoveredPalette() {
+                Arrow = ColorTranslatorFromHtml(xml, "DropDownMouseOverGlyph"),
+                Separator = ColorTranslatorFromHtml(xml, "CommandBarSplitButtonSeparator"),
+            };
+            this.CommandBarToolbarButtonPressed = new CommandBarToolbarButtonPressedPalette() {
+                Arrow = ColorTranslatorFromHtml(xml, "DropDownMouseDownGlyph"),
+                Background = ColorTranslatorFromHtml(xml, "CommandBarMouseDownBackgroundBegin"),
+                Text = ColorTranslatorFromHtml(xml, "CommandBarTextMouseDown"),
+            };
+            this.CommandBarToolbarOverflowHovered = new CommandBarToolbarOverflowButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "CommandBarOptionsMouseOverBackgroundBegin"),
+                Glyph = ColorTranslatorFromHtml(xml, "CommandBarOptionsMouseOverGlyph"),
+            };
+            this.CommandBarToolbarOverflowPressed = new CommandBarToolbarOverflowButtonPalette()
+            {
+                Background = ColorTranslatorFromHtml(xml, "CommandBarOptionsMouseDownBackgroundBegin"),
+                Glyph = ColorTranslatorFromHtml(xml, "CommandBarOptionsMouseDownGlyph"),
+            };
         }
 
-        public AutoHideStripPalette AutoHideStripDefault { get; } = new AutoHideStripPalette();
-        public AutoHideStripPalette AutoHideStripHovered { get; } = new AutoHideStripPalette();
-        public ButtonPalette OverflowButtonDefault { get; } = new ButtonPalette();
-        public HoveredButtonPalette OverflowButtonHovered { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette OverflowButtonPressed { get; } = new HoveredButtonPalette();
-        public TabPalette TabSelectedActive { get; } = new TabPalette();
-        public TabPalette TabSelectedInactive { get; } = new TabPalette();
-        public UnselectedTabPalette TabUnselected { get; } = new UnselectedTabPalette();
-        public TabPalette TabUnselectedHovered { get; } = new TabPalette();
-        public HoveredButtonPalette TabButtonSelectedActiveHovered { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette TabButtonSelectedActivePressed { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette TabButtonSelectedInactiveHovered { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette TabButtonSelectedInactivePressed { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette TabButtonUnselectedTabHoveredButtonHovered { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette TabButtonUnselectedTabHoveredButtonPressed { get; } = new HoveredButtonPalette();
-        public MainWindowPalette MainWindowActive { get; } = new MainWindowPalette();
-        public MainWindowStatusBarPalette MainWindowStatusBarDefault { get; } = new MainWindowStatusBarPalette();
-        public ToolWindowCaptionPalette ToolWindowCaptionActive { get; } = new ToolWindowCaptionPalette();
-        public ToolWindowCaptionPalette ToolWindowCaptionInactive { get; } = new ToolWindowCaptionPalette();
-        public HoveredButtonPalette ToolWindowCaptionButtonActiveHovered { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette ToolWindowCaptionButtonPressed { get; } = new HoveredButtonPalette();
-        public HoveredButtonPalette ToolWindowCaptionButtonInactiveHovered { get; } = new HoveredButtonPalette();
-        public ToolWindowTabPalette ToolWindowTabSelectedActive { get; } = new ToolWindowTabPalette();
-        public ToolWindowTabPalette ToolWindowTabSelectedInactive { get; } = new ToolWindowTabPalette();
-        public ToolWindowUnselectedTabPalette ToolWindowTabUnselected { get; } = new ToolWindowUnselectedTabPalette();
-        public ToolWindowTabPalette ToolWindowTabUnselectedHovered { get; } = new ToolWindowTabPalette();
-        public Color ToolWindowBorder { get; set; }
-        public Color ToolWindowSeparator { get; set; }
-        public DockTargetPalette DockTarget { get; } = new DockTargetPalette();
-        public CommandBarMenuPalette CommandBarMenuDefault { get; } = new CommandBarMenuPalette();
-        public CommandBarMenuPopupPalette CommandBarMenuPopupDefault { get; } = new CommandBarMenuPopupPalette();
-        public CommandBarMenuPopupDisabledPalette CommandBarMenuPopupDisabled { get; } = new CommandBarMenuPopupDisabledPalette();
-        public CommandBarMenuPopupHoveredPalette CommandBarMenuPopupHovered { get; } = new CommandBarMenuPopupHoveredPalette();
-        public CommandBarMenuTopLevelHeaderPalette CommandBarMenuTopLevelHeaderHovered { get; } = new CommandBarMenuTopLevelHeaderPalette();
-        public CommandBarToolbarPalette CommandBarToolbarDefault { get; } = new CommandBarToolbarPalette();
-        public CommandBarToolbarButtonCheckedPalette CommandBarToolbarButtonChecked { get; } = new CommandBarToolbarButtonCheckedPalette();
-        public CommandBarToolbarButtonCheckedHoveredPalette CommandBarToolbarButtonCheckedHovered { get; } = new CommandBarToolbarButtonCheckedHoveredPalette();
-        public CommandBarToolbarButtonPalette CommandBarToolbarButtonDefault { get; } = new CommandBarToolbarButtonPalette();
-        public CommandBarToolbarButtonHoveredPalette CommandBarToolbarButtonHovered { get; } = new CommandBarToolbarButtonHoveredPalette();
-        public CommandBarToolbarButtonPressedPalette CommandBarToolbarButtonPressed { get; } = new CommandBarToolbarButtonPressedPalette();
-        public CommandBarToolbarOverflowButtonPalette CommandBarToolbarOverflowHovered { get; } = new CommandBarToolbarOverflowButtonPalette();
-        public CommandBarToolbarOverflowButtonPalette CommandBarToolbarOverflowPressed { get; } = new CommandBarToolbarOverflowButtonPalette();
-
-        public VisualStudioColorTable ColorTable { get; }
+        public AutoHideStripPalette AutoHideStripDefault { get; }
+        public AutoHideStripPalette AutoHideStripHovered { get; }
+        public ButtonPalette OverflowButtonDefault { get; }
+        public HoveredButtonPalette OverflowButtonHovered { get; }
+        public HoveredButtonPalette OverflowButtonPressed { get; }
+        public TabPalette TabSelectedActive { get; }
+        public TabPalette TabSelectedInactive { get; } 
+        public UnselectedTabPalette TabUnselected { get; } 
+        public TabPalette TabUnselectedHovered { get; }
+        public HoveredButtonPalette TabButtonSelectedActiveHovered { get; }
+        public HoveredButtonPalette TabButtonSelectedActivePressed { get; }
+        public HoveredButtonPalette TabButtonSelectedInactiveHovered { get; }
+        public HoveredButtonPalette TabButtonSelectedInactivePressed { get; }
+        public HoveredButtonPalette TabButtonUnselectedTabHoveredButtonHovered { get; }
+        public HoveredButtonPalette TabButtonUnselectedTabHoveredButtonPressed { get; }
+        public MainWindowPalette MainWindowActive { get; }
+        public MainWindowStatusBarPalette MainWindowStatusBarDefault { get; }
+        public ToolWindowCaptionPalette ToolWindowCaptionActive { get; }
+        public ToolWindowCaptionPalette ToolWindowCaptionInactive { get; } 
+        public HoveredButtonPalette ToolWindowCaptionButtonActiveHovered { get; } 
+        public HoveredButtonPalette ToolWindowCaptionButtonPressed { get; }
+        public HoveredButtonPalette ToolWindowCaptionButtonInactiveHovered { get; }
+        public ToolWindowTabPalette ToolWindowTabSelectedActive { get; } 
+        public ToolWindowTabPalette ToolWindowTabSelectedInactive { get; } 
+        public ToolWindowUnselectedTabPalette ToolWindowTabUnselected { get; }
+        public ToolWindowTabPalette ToolWindowTabUnselectedHovered { get; }
+        public Color ToolWindowBorder { get;  }
+        public Color ToolWindowSeparator { get;  }
+        public DockTargetPalette DockTarget { get; } 
+        public CommandBarMenuPalette CommandBarMenuDefault { get; } 
+        public CommandBarMenuPopupPalette CommandBarMenuPopupDefault { get; }
+        public CommandBarMenuPopupDisabledPalette CommandBarMenuPopupDisabled { get; } 
+        public CommandBarMenuPopupHoveredPalette CommandBarMenuPopupHovered { get; } 
+        public CommandBarMenuTopLevelHeaderPalette CommandBarMenuTopLevelHeaderHovered { get; } 
+        public CommandBarToolbarPalette CommandBarToolbarDefault { get; } 
+        public CommandBarToolbarButtonCheckedPalette CommandBarToolbarButtonChecked { get; }
+        public CommandBarToolbarButtonCheckedHoveredPalette CommandBarToolbarButtonCheckedHovered { get; }
+        public CommandBarToolbarButtonPalette CommandBarToolbarButtonDefault { get; } 
+        public CommandBarToolbarButtonHoveredPalette CommandBarToolbarButtonHovered { get; }
+        public CommandBarToolbarButtonPressedPalette CommandBarToolbarButtonPressed { get; }
+        public CommandBarToolbarOverflowButtonPalette CommandBarToolbarOverflowHovered { get; }
+        public CommandBarToolbarOverflowButtonPalette CommandBarToolbarOverflowPressed { get; }
     }
 
     public class CommandBarToolbarOverflowButtonPalette
diff --git a/WinFormsUI/ThemeVS2012.csproj b/WinFormsUI/ThemeVS2012.csproj
index 0b8886c..f48ee93 100644
--- a/WinFormsUI/ThemeVS2012.csproj
+++ b/WinFormsUI/ThemeVS2012.csproj
@@ -53,7 +53,6 @@
     <Compile Include="ThemeVS2012\VS2012DockPaneCaptionInertButton.cs">
       <SubType>Component</SubType>
     </Compile>
-    <Compile Include="ThemeVS2012\VS2012PaletteFactory.cs" />
     <Compile Include="ThemeVS2012\VS2012ThemeBase.cs">
       <SubType>Component</SubType>
     </Compile>
diff --git a/WinFormsUI/ThemeVS2012/VS2012PaletteFactory.cs b/WinFormsUI/ThemeVS2012/VS2012PaletteFactory.cs
deleted file mode 100644
index 1da758e..0000000
--- a/WinFormsUI/ThemeVS2012/VS2012PaletteFactory.cs
+++ /dev/null
@@ -1,203 +0,0 @@
-ï»¿using System.Drawing;
-using System.IO;
-using System.Linq;
-using System.Xml.Linq;
-using WeifenLuo.WinFormsUI.Docking;
-
-namespace WeifenLuo.WinFormsUI.ThemeVS2012
-{
-    public class VS2012PaletteFactory : IPaletteFactory
-    {
-        private const string Env = "Environment";
-        private XDocument _xml;
-
-        public VS2012PaletteFactory(byte[] file)
-        {
-            _xml = XDocument.Load(new StreamReader(new MemoryStream(file)));
-        }
-
-        public void Initialize(DockPanelColorPalette palette)
-        {
-            palette.AutoHideStripDefault.Background = ColorTranslatorFromHtml("AutoHideTabBackgroundBegin");
-            palette.AutoHideStripDefault.Border = ColorTranslatorFromHtml("AutoHideTabBorder");
-            palette.AutoHideStripDefault.Text = ColorTranslatorFromHtml("AutoHideTabText");
-
-            palette.AutoHideStripHovered.Background = ColorTranslatorFromHtml("AutoHideTabMouseOverBackgroundBegin");
-            palette.AutoHideStripHovered.Border = ColorTranslatorFromHtml("AutoHideTabMouseOverBorder");
-            palette.AutoHideStripHovered.Text = ColorTranslatorFromHtml("AutoHideTabMouseOverText");
-
-            palette.CommandBarMenuDefault.Background = ColorTranslatorFromHtml("CommandShelfHighlightGradientBegin");
-            palette.CommandBarMenuDefault.Text = ColorTranslatorFromHtml("CommandBarTextActive");
-
-            palette.CommandBarMenuPopupDefault.Arrow = ColorTranslatorFromHtml("CommandBarMenuSubmenuGlyph");
-            palette.CommandBarMenuPopupDefault.BackgroundBottom = ColorTranslatorFromHtml("CommandBarMenuBackgroundGradientEnd");
-            palette.CommandBarMenuPopupDefault.BackgroundTop = ColorTranslatorFromHtml("CommandBarMenuBackgroundGradientBegin");
-            palette.CommandBarMenuPopupDefault.Border = ColorTranslatorFromHtml("CommandBarMenuBorder");
-            palette.CommandBarMenuPopupDefault.Checkmark = ColorTranslatorFromHtml("CommandBarCheckBox");
-            palette.CommandBarMenuPopupDefault.CheckmarkBackground = ColorTranslatorFromHtml("CommandBarSelectedIcon");
-            palette.CommandBarMenuPopupDefault.IconBackground = ColorTranslatorFromHtml("CommandBarMenuIconBackground");
-            palette.CommandBarMenuPopupDefault.Separator = ColorTranslatorFromHtml("CommandBarMenuSeparator");
-
-            palette.CommandBarMenuPopupDisabled.Checkmark = ColorTranslatorFromHtml("CommandBarCheckBoxDisabled");
-            palette.CommandBarMenuPopupDisabled.CheckmarkBackground = ColorTranslatorFromHtml("CommandBarSelectedIconDisabled");
-            palette.CommandBarMenuPopupDisabled.Text = ColorTranslatorFromHtml("CommandBarTextInactive");
-
-            palette.CommandBarMenuPopupHovered.Arrow = ColorTranslatorFromHtml("CommandBarMenuMouseOverSubmenuGlyph");
-            palette.CommandBarMenuPopupHovered.Checkmark = ColorTranslatorFromHtml("CommandBarCheckBoxMouseOver");
-            palette.CommandBarMenuPopupHovered.CheckmarkBackground = ColorTranslatorFromHtml("CommandBarHoverOverSelectedIcon");
-            palette.CommandBarMenuPopupHovered.ItemBackground = ColorTranslatorFromHtml("CommandBarMenuItemMouseOver");
-            palette.CommandBarMenuPopupHovered.Text = ColorTranslatorFromHtml("CommandBarMenuItemMouseOver", true);
-
-            palette.CommandBarMenuTopLevelHeaderHovered.Background = ColorTranslatorFromHtml("CommandBarMouseOverBackgroundBegin");
-            palette.CommandBarMenuTopLevelHeaderHovered.Border = ColorTranslatorFromHtml("CommandBarBorder");
-            palette.CommandBarMenuTopLevelHeaderHovered.Text = ColorTranslatorFromHtml("CommandBarTextHover");
-
-            palette.CommandBarToolbarDefault.Background = ColorTranslatorFromHtml("CommandBarGradientBegin");
-            palette.CommandBarToolbarDefault.Border = ColorTranslatorFromHtml("CommandBarToolBarBorder");
-            palette.CommandBarToolbarDefault.Grip = ColorTranslatorFromHtml("CommandBarDragHandle");
-            palette.CommandBarToolbarDefault.OverflowButtonBackground = ColorTranslatorFromHtml("CommandBarOptionsBackground");
-            palette.CommandBarToolbarDefault.OverflowButtonGlyph = ColorTranslatorFromHtml("CommandBarOptionsGlyph");
-            palette.CommandBarToolbarDefault.Separator = ColorTranslatorFromHtml("CommandBarToolBarSeparator");
-            palette.CommandBarToolbarDefault.SeparatorAccent = ColorTranslatorFromHtml("CommandBarToolBarSeparatorHighlight");
-            palette.CommandBarToolbarDefault.Tray = ColorTranslatorFromHtml("CommandShelfBackgroundGradientBegin");
-
-            palette.CommandBarToolbarButtonChecked.Background = ColorTranslatorFromHtml("CommandBarSelected");
-            palette.CommandBarToolbarButtonChecked.Border = ColorTranslatorFromHtml("CommandBarSelectedBorder");
-            palette.CommandBarToolbarButtonChecked.Text = ColorTranslatorFromHtml("CommandBarTextSelected");
-
-            palette.CommandBarToolbarButtonCheckedHovered.Border = ColorTranslatorFromHtml("CommandBarHoverOverSelectedIconBorder");
-            palette.CommandBarToolbarButtonCheckedHovered.Text = ColorTranslatorFromHtml("CommandBarTextHoverOverSelected");
-
-            palette.CommandBarToolbarButtonDefault.Arrow = ColorTranslatorFromHtml("DropDownGlyph");
-
-            palette.CommandBarToolbarButtonHovered.Arrow = ColorTranslatorFromHtml("DropDownMouseOverGlyph");
-            palette.CommandBarToolbarButtonHovered.Separator = ColorTranslatorFromHtml("CommandBarSplitButtonSeparator");
-
-            palette.CommandBarToolbarButtonPressed.Arrow = ColorTranslatorFromHtml("DropDownMouseDownGlyph");
-            palette.CommandBarToolbarButtonPressed.Background = ColorTranslatorFromHtml("CommandBarMouseDownBackgroundBegin");
-            palette.CommandBarToolbarButtonPressed.Text = ColorTranslatorFromHtml("CommandBarTextMouseDown");
-
-            palette.CommandBarToolbarOverflowHovered.Background = ColorTranslatorFromHtml("CommandBarOptionsMouseOverBackgroundBegin");
-            palette.CommandBarToolbarOverflowHovered.Glyph = ColorTranslatorFromHtml("CommandBarOptionsMouseOverGlyph");
-
-            palette.CommandBarToolbarOverflowPressed.Background = ColorTranslatorFromHtml("CommandBarOptionsMouseDownBackgroundBegin");
-            palette.CommandBarToolbarOverflowPressed.Glyph = ColorTranslatorFromHtml("CommandBarOptionsMouseDownGlyph");
-
-            palette.OverflowButtonDefault.Glyph = ColorTranslatorFromHtml("DocWellOverflowButtonGlyph");
-
-            palette.OverflowButtonHovered.Background = ColorTranslatorFromHtml("DocWellOverflowButtonMouseOverBackground");
-            palette.OverflowButtonHovered.Border = ColorTranslatorFromHtml("DocWellOverflowButtonMouseOverBorder");
-            palette.OverflowButtonHovered.Glyph = ColorTranslatorFromHtml("DocWellOverflowButtonMouseOverGlyph");
-
-            palette.OverflowButtonPressed.Background = ColorTranslatorFromHtml("DocWellOverflowButtonMouseDownBackground");
-            palette.OverflowButtonPressed.Border = ColorTranslatorFromHtml("DocWellOverflowButtonMouseDownBorder");
-            palette.OverflowButtonPressed.Glyph = ColorTranslatorFromHtml("DocWellOverflowButtonMouseDownGlyph");
-
-            palette.TabSelectedActive.Background = ColorTranslatorFromHtml("FileTabSelectedBorder");
-            palette.TabSelectedActive.Button = ColorTranslatorFromHtml("FileTabButtonSelectedActiveGlyph");
-            palette.TabSelectedActive.Text = ColorTranslatorFromHtml("FileTabSelectedText");
-
-            palette.TabSelectedInactive.Background = ColorTranslatorFromHtml("FileTabInactiveBorder");
-            palette.TabSelectedInactive.Button = ColorTranslatorFromHtml("FileTabButtonSelectedInactiveGlyph");
-            palette.TabSelectedInactive.Text = ColorTranslatorFromHtml("FileTabInactiveText");
-
-            palette.TabUnselected.Text = ColorTranslatorFromHtml("FileTabText");
-            palette.TabUnselected.Background = ColorTranslatorFromHtml("FileTabBackground");
-
-            palette.TabUnselectedHovered.Background = ColorTranslatorFromHtml("FileTabHotBorder");
-            palette.TabUnselectedHovered.Button = ColorTranslatorFromHtml("FileTabHotGlyph");
-            palette.TabUnselectedHovered.Text = ColorTranslatorFromHtml("FileTabHotText");
-
-            palette.TabButtonSelectedActiveHovered.Background = ColorTranslatorFromHtml("FileTabButtonHoverSelectedActive");
-            palette.TabButtonSelectedActiveHovered.Border = ColorTranslatorFromHtml("FileTabButtonHoverSelectedActiveBorder");
-            palette.TabButtonSelectedActiveHovered.Glyph = ColorTranslatorFromHtml("FileTabButtonHoverSelectedActiveGlyph");
-
-            palette.TabButtonSelectedActivePressed.Background = ColorTranslatorFromHtml("FileTabButtonDownSelectedActive");
-            palette.TabButtonSelectedActivePressed.Border = ColorTranslatorFromHtml("FileTabButtonDownSelectedActiveBorder");
-            palette.TabButtonSelectedActivePressed.Glyph = ColorTranslatorFromHtml("FileTabButtonDownSelectedActiveGlyph");
-
-            palette.TabButtonSelectedInactiveHovered.Background = ColorTranslatorFromHtml("FileTabButtonHoverSelectedInactive");
-            palette.TabButtonSelectedInactiveHovered.Border = ColorTranslatorFromHtml("FileTabButtonHoverSelectedInactiveBorder");
-            palette.TabButtonSelectedInactiveHovered.Glyph = ColorTranslatorFromHtml("FileTabButtonHoverSelectedInactiveGlyph");
-
-            palette.TabButtonSelectedInactivePressed.Background = ColorTranslatorFromHtml("FileTabButtonDownSelectedInactive");
-            palette.TabButtonSelectedInactivePressed.Border = ColorTranslatorFromHtml("FileTabButtonDownSelectedInactiveBorder");
-            palette.TabButtonSelectedInactivePressed.Glyph = ColorTranslatorFromHtml("FileTabButtonDownSelectedInactiveGlyph");
-
-            palette.TabButtonUnselectedTabHoveredButtonHovered.Background = ColorTranslatorFromHtml("FileTabButtonHoverInactive");
-            palette.TabButtonUnselectedTabHoveredButtonHovered.Border = ColorTranslatorFromHtml("FileTabButtonHoverInactiveBorder");
-            palette.TabButtonUnselectedTabHoveredButtonHovered.Glyph = ColorTranslatorFromHtml("FileTabButtonHoverInactiveGlyph");
-
-            palette.TabButtonUnselectedTabHoveredButtonPressed.Background = ColorTranslatorFromHtml("FileTabButtonDownInactive");
-            palette.TabButtonUnselectedTabHoveredButtonPressed.Border = ColorTranslatorFromHtml("FileTabButtonDownInactiveBorder");
-            palette.TabButtonUnselectedTabHoveredButtonPressed.Glyph = ColorTranslatorFromHtml("FileTabButtonDownInactiveGlyph");
-
-            palette.MainWindowActive.Background = ColorTranslatorFromHtml("EnvironmentBackground");
-            palette.MainWindowStatusBarDefault.Background = ColorTranslatorFromHtml("StatusBarDefault");
-            palette.MainWindowStatusBarDefault.Highlight = ColorTranslatorFromHtml("StatusBarHighlight");
-            palette.MainWindowStatusBarDefault.HighlightText = ColorTranslatorFromHtml("StatusBarHighlight", true);
-            palette.MainWindowStatusBarDefault.ResizeGrip = ColorTranslatorFromHtml("MainWindowResizeGripTexture1");
-            palette.MainWindowStatusBarDefault.ResizeGripAccent = ColorTranslatorFromHtml("MainWindowResizeGripTexture2");
-            palette.MainWindowStatusBarDefault.Text = ColorTranslatorFromHtml("StatusBarText");
-
-            palette.ToolWindowCaptionActive.Background = ColorTranslatorFromHtml("TitleBarActiveBorder");
-            palette.ToolWindowCaptionActive.Button = ColorTranslatorFromHtml("ToolWindowButtonActiveGlyph");
-            palette.ToolWindowCaptionActive.Grip = ColorTranslatorFromHtml("TitleBarDragHandleActive");
-            palette.ToolWindowCaptionActive.Text = ColorTranslatorFromHtml("TitleBarActiveText");
-
-            palette.ToolWindowCaptionInactive.Background = ColorTranslatorFromHtml("TitleBarInactive");
-            palette.ToolWindowCaptionInactive.Button = ColorTranslatorFromHtml("ToolWindowButtonInactiveGlyph");
-            palette.ToolWindowCaptionInactive.Grip = ColorTranslatorFromHtml("TitleBarDragHandle");
-            palette.ToolWindowCaptionInactive.Text = ColorTranslatorFromHtml("TitleBarInactiveText");
-
-            palette.ToolWindowCaptionButtonActiveHovered.Background = ColorTranslatorFromHtml("ToolWindowButtonHoverActive");
-            palette.ToolWindowCaptionButtonActiveHovered.Border = ColorTranslatorFromHtml("ToolWindowButtonHoverActiveBorder");
-            palette.ToolWindowCaptionButtonActiveHovered.Glyph = ColorTranslatorFromHtml("ToolWindowButtonHoverActiveGlyph");
-
-            palette.ToolWindowCaptionButtonPressed.Background = ColorTranslatorFromHtml("ToolWindowButtonDown");
-            palette.ToolWindowCaptionButtonPressed.Border = ColorTranslatorFromHtml("ToolWindowButtonDownBorder");
-            palette.ToolWindowCaptionButtonPressed.Glyph = ColorTranslatorFromHtml("ToolWindowButtonDownActiveGlyph");
-
-            palette.ToolWindowCaptionButtonInactiveHovered.Background = ColorTranslatorFromHtml("ToolWindowButtonHoverInactive");
-            palette.ToolWindowCaptionButtonInactiveHovered.Border = ColorTranslatorFromHtml("ToolWindowButtonHoverInactiveBorder");
-            palette.ToolWindowCaptionButtonInactiveHovered.Glyph = ColorTranslatorFromHtml("ToolWindowButtonHoverInactiveGlyph");
-
-            palette.ToolWindowTabSelectedActive.Background = ColorTranslatorFromHtml("ToolWindowTabSelectedTab");
-            palette.ToolWindowTabSelectedActive.Text = ColorTranslatorFromHtml("ToolWindowTabSelectedActiveText");
-
-            palette.ToolWindowTabSelectedInactive.Background = palette.ToolWindowTabSelectedActive.Background;
-            palette.ToolWindowTabSelectedInactive.Text = ColorTranslatorFromHtml("ToolWindowTabSelectedText");
-
-            palette.ToolWindowTabUnselected.Text = ColorTranslatorFromHtml("ToolWindowTabText");
-            palette.ToolWindowTabUnselected.Background = ColorTranslatorFromHtml("ToolWindowTabGradientBegin");
-
-            palette.ToolWindowTabUnselectedHovered.Background = ColorTranslatorFromHtml("ToolWindowTabMouseOverBackgroundBegin");
-            palette.ToolWindowTabUnselectedHovered.Text = ColorTranslatorFromHtml("ToolWindowTabMouseOverText");
-
-            palette.ToolWindowSeparator = ColorTranslatorFromHtml("ToolWindowTabSeparator");
-            palette.ToolWindowBorder = ColorTranslatorFromHtml("ToolWindowBorder");
-
-            palette.DockTarget.Background = ColorTranslatorFromHtml("DockTargetBackground");
-            palette.DockTarget.Border = ColorTranslatorFromHtml("DockTargetBorder");
-            palette.DockTarget.ButtonBackground = ColorTranslatorFromHtml("DockTargetButtonBackgroundBegin");
-            palette.DockTarget.ButtonBorder = ColorTranslatorFromHtml("DockTargetButtonBorder");
-            palette.DockTarget.GlyphBackground = ColorTranslatorFromHtml("DockTargetGlyphBackgroundBegin");
-            palette.DockTarget.GlyphArrow = ColorTranslatorFromHtml("DockTargetGlyphArrow");
-            palette.DockTarget.GlyphBorder = ColorTranslatorFromHtml("DockTargetGlyphBorder");
-        }
-
-        private Color ColorTranslatorFromHtml(string name, bool foreground = false)
-        {
-            var color = _xml.Root.Element("Theme")
-                .Elements("Category").FirstOrDefault(item => item.Attribute("Name").Value == Env)?
-                .Elements("Color").FirstOrDefault(item => item.Attribute("Name").Value == name)?
-                .Element(foreground ? "Foreground" : "Background").Attribute("Source").Value;
-            if (color == null)
-            {
-                return Color.Transparent;
-            }
-
-            return ColorTranslator.FromHtml($"#{color}");
-        }
-    }
-}
diff --git a/WinFormsUI/ThemeVS2012/VS2012ThemeBase.cs b/WinFormsUI/ThemeVS2012/VS2012ThemeBase.cs
index 036dba7..fc3a1c6 100644
--- a/WinFormsUI/ThemeVS2012/VS2012ThemeBase.cs
+++ b/WinFormsUI/ThemeVS2012/VS2012ThemeBase.cs
@@ -8,9 +8,9 @@
     /// </summary>
     public abstract class VS2012ThemeBase : ThemeBase
     {
-        public VS2012ThemeBase(byte[] resources, IDockPaneSplitterControlFactory splitterFactory, IWindowSplitterControlFactory windowsSplitterFactory)
+        public VS2012ThemeBase(DockPanelColorPalette palette, IDockPaneSplitterControlFactory splitterFactory, IWindowSplitterControlFactory windowsSplitterFactory)
         {
-            ColorPalette = new DockPanelColorPalette(new VS2012PaletteFactory(resources));
+            ColorPalette = palette;
             Skin = new DockPanelSkin();
             PaintingService = new PaintingService();
             ImageService = new ImageService(this);
@@ -32,6 +32,10 @@ public VS2012ThemeBase(byte[] resources, IDockPaneSplitterControlFactory splitte
             Extender.DockIndicatorFactory = new VS2012DockIndicatorFactory();
         }
 
+        public VS2012ThemeBase(byte[] resources, IDockPaneSplitterControlFactory splitterFactory, IWindowSplitterControlFactory windowsSplitterFactory)
+            : this(new DockPanelColorPalette(resources), splitterFactory, windowsSplitterFactory)
+        { }
+
         public override void CleanUp(DockPanel dockPanel)
         {
             PaintingService.CleanUp();
diff --git a/WinFormsUI/ThemeVS2013.csproj b/WinFormsUI/ThemeVS2013.csproj
index 18e1d08..e7ddb22 100644
--- a/WinFormsUI/ThemeVS2013.csproj
+++ b/WinFormsUI/ThemeVS2013.csproj
@@ -57,7 +57,6 @@
       <SubType>Component</SubType>
     </Compile>
     <Compile Include="ThemeVS2012\VS2012DockWindowFactory.cs" />
-    <Compile Include="ThemeVS2012\VS2012PaletteFactory.cs" />
     <Compile Include="ThemeVS2012\VS2012PaneIndicatorFactory.cs" />
     <Compile Include="ThemeVS2012\VS2012PanelIndicatorFactory.cs" />
     <Compile Include="ThemeVS2013\Resources.Designer.cs">
diff --git a/WinFormsUI/ThemeVS2013/VS2013ThemeBase.cs b/WinFormsUI/ThemeVS2013/VS2013ThemeBase.cs
index abf47b4..0ff52c3 100644
--- a/WinFormsUI/ThemeVS2013/VS2013ThemeBase.cs
+++ b/WinFormsUI/ThemeVS2013/VS2013ThemeBase.cs
@@ -8,9 +8,9 @@ namespace WeifenLuo.WinFormsUI.ThemeVS2013
     /// </summary>
     public abstract class VS2013ThemeBase : ThemeBase
     {
-        public VS2013ThemeBase(byte[] resources)
+        public VS2013ThemeBase(DockPanelColorPalette palette)
         {
-            ColorPalette = new DockPanelColorPalette(new VS2012PaletteFactory(resources));
+            ColorPalette = palette;
             Skin = new DockPanelSkin();
             PaintingService = new PaintingService();
             ImageService = new ImageService(this);
@@ -33,6 +33,11 @@ public VS2013ThemeBase(byte[] resources)
             Extender.DockIndicatorFactory = new VS2012DockIndicatorFactory();
         }
 
+        public VS2013ThemeBase(byte[] resources)
+            : this(new DockPanelColorPalette(resources))
+        {
+        }
+
         public override void CleanUp(DockPanel dockPanel)
         {
             PaintingService.CleanUp();
diff --git a/WinFormsUI/ThemeVS2015.csproj b/WinFormsUI/ThemeVS2015.csproj
index c2c96e2..79ebee7 100644
--- a/WinFormsUI/ThemeVS2015.csproj
+++ b/WinFormsUI/ThemeVS2015.csproj
@@ -57,7 +57,6 @@
       <SubType>Component</SubType>
     </Compile>
     <Compile Include="ThemeVS2012\VS2012DockWindowFactory.cs" />
-    <Compile Include="ThemeVS2012\VS2012PaletteFactory.cs" />
     <Compile Include="ThemeVS2012\VS2012PaneIndicatorFactory.cs" />
     <Compile Include="ThemeVS2012\VS2012PanelIndicatorFactory.cs" />
     <Compile Include="ThemeVS2013\VS2013DockPane.cs">
diff --git a/WinFormsUI/ThemeVS2015/VS2015ThemeBase.cs b/WinFormsUI/ThemeVS2015/VS2015ThemeBase.cs
index 9c6b830..fdab8f0 100644
--- a/WinFormsUI/ThemeVS2015/VS2015ThemeBase.cs
+++ b/WinFormsUI/ThemeVS2015/VS2015ThemeBase.cs
@@ -9,9 +9,9 @@ namespace WeifenLuo.WinFormsUI.ThemeVS2015
     /// </summary>
     public abstract class VS2015ThemeBase : ThemeBase
     {
-        public VS2015ThemeBase(byte[] resources)
+        public VS2015ThemeBase(DockPanelColorPalette palette)
         {
-            ColorPalette = new DockPanelColorPalette(new VS2012PaletteFactory(resources));
+            ColorPalette = palette;
             Skin = new DockPanelSkin();
             PaintingService = new PaintingService();
             ImageService = new ImageService(this);
@@ -37,6 +37,11 @@ public VS2015ThemeBase(byte[] resources)
             Extender.DockIndicatorFactory = new VS2012DockIndicatorFactory();
         }
 
+        public VS2015ThemeBase(byte[] resources)
+            : this(new DockPanelColorPalette(resources))
+        {
+        }
+
         public override void CleanUp(DockPanel dockPanel)
         {
             PaintingService.CleanUp();
-- 
2.39.1.windows.1

