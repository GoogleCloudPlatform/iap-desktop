From fc266ed0e4b86ec82ecb791d27640185a4bfb4b8 Mon Sep 17 00:00:00 2001
From: IAP Desktop Build <iap-desktop+build@google.com>
Date: Fri, 14 Oct 2022 13:18:58 +1100
Subject: [PATCH 13/13] Change TerminalColor class to be readonly

This fixes an issue where the background color
is incorrectly kept as default background color.
---
 VtNetCore.Unit.Tests/VirtualTerminal.cs       |  4 +--
 .../VirtualTerminal/Model/TerminalColor.cs    | 20 +++++++++----
 .../VirtualTerminalController.cs              | 30 ++++---------------
 3 files changed, 22 insertions(+), 32 deletions(-)

diff --git a/VtNetCore.Unit.Tests/VirtualTerminal.cs b/VtNetCore.Unit.Tests/VirtualTerminal.cs
index 3b93f38..ab52881 100644
--- a/VtNetCore.Unit.Tests/VirtualTerminal.cs
+++ b/VtNetCore.Unit.Tests/VirtualTerminal.cs
@@ -569,7 +569,7 @@ namespace VtNetCore.Unit.Tests
         [Fact]
         public void ChangingForegroundColorAppliesToCursor()
         {
-            var red = new TerminalColor() { Red = 255 };
+            var red = new TerminalColor(255, 0, 0);
 
             var controller = new VirtualTerminalController(
                 TerminalAttribute.CreateDefault());
@@ -583,7 +583,7 @@ namespace VtNetCore.Unit.Tests
         [Fact]
         public void ChangingBackgroundColorAppliesToCursor()
         {
-            var red = new TerminalColor() { Red = 255 };
+            var red = new TerminalColor(255, 0, 0);
 
             var controller = new VirtualTerminalController(
                 TerminalAttribute.CreateDefault());
diff --git a/VtNetCore/VirtualTerminal/Model/TerminalColor.cs b/VtNetCore/VirtualTerminal/Model/TerminalColor.cs
index 8d192cd..bf48201 100644
--- a/VtNetCore/VirtualTerminal/Model/TerminalColor.cs
+++ b/VtNetCore/VirtualTerminal/Model/TerminalColor.cs
@@ -8,7 +8,7 @@ namespace VtNetCore.VirtualTerminal.Model
 {
     public class TerminalColor
     {
-        public uint ARGB { get; set; }
+        public uint ARGB { get; private set; }
         private static readonly Regex webColorExpression = new Regex(@"^#(?<red>[0-9A-Fa-f]{2})(?<green>[0-9A-Fa-f]{2})(?<blue>[0-9A-Fa-f]{2})$", RegexOptions.Compiled);
         private static readonly Regex rgbiColorExpression = new Regex(@"^rgbi:(?<red>[0-9A-Za-z]{1,4})\/(?<green>[0-9A-Za-z]{1,4})\/(?<blue>[0-9A-Za-z]{1,4})$", RegexOptions.Compiled);
 
@@ -16,6 +16,13 @@ namespace VtNetCore.VirtualTerminal.Model
         {
         }
 
+        public TerminalColor(uint red, uint green, uint blue)
+        {
+            Red = red;
+            Green = green;
+            Blue = blue;
+        }
+
         public TerminalColor(TerminalColor other)
         {
             ARGB = other.ARGB;
@@ -347,7 +354,7 @@ namespace VtNetCore.VirtualTerminal.Model
             {
                 return (ARGB >> 16) & 0xFF;
             }
-            set
+            private set
             {
                 ARGB = (ARGB & 0xFF00FFFF) | ((value & 0xFF) << 16);
             }
@@ -359,7 +366,7 @@ namespace VtNetCore.VirtualTerminal.Model
             {
                 return (ARGB >> 8) & 0xFF;
             }
-            set
+            private set
             {
                 ARGB = (ARGB & 0xFFFF00FF) | ((value & 0xFF) << 8);
             }
@@ -371,7 +378,7 @@ namespace VtNetCore.VirtualTerminal.Model
             {
                 return ARGB & 0xFF;
             }
-            set
+            private set
             {
                 ARGB = (ARGB & 0xFFFFFF00) | (value & 0xFF);
             }
@@ -392,6 +399,7 @@ namespace VtNetCore.VirtualTerminal.Model
                 return string.Format("rgb:{0:X2}/{0:X2}/{0:X2}", Red, Green, Blue);
             }
         }
+
         private void Set(uint red, uint green, uint blue)
         {
             Red = red;
@@ -399,7 +407,7 @@ namespace VtNetCore.VirtualTerminal.Model
             Blue = blue;
         }
 
-        public void Set(string text)
+        private void Set(string text)
         {
             var m = webColorExpression.Match(text);
             if (m.Success)
@@ -424,7 +432,7 @@ namespace VtNetCore.VirtualTerminal.Model
             }
         }
 
-        public void Set(ETerminalColor termColor, bool bright)
+        private void Set(ETerminalColor termColor, bool bright)
         {
             if (bright)
             {
diff --git a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
index 2338836..d8c88da 100644
--- a/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
+++ b/VtNetCore/VirtualTerminal/VirtualTerminalController.cs
@@ -1728,30 +1728,21 @@
         {
             LogController("SetRgbForegroundColor(r:" + red + ", g:" + green + ", b:" + blue + ")");
 
-            if (CursorState.Attributes.ForegroundRgb == null)
-                CursorState.Attributes.ForegroundRgb = new TerminalColor { Red = (uint)red, Green = (uint)green, Blue = (uint)blue };
-            else
-                CursorState.Attributes.ForegroundRgb.Set((uint)red, (uint)green, (uint)blue);
+            CursorState.Attributes.ForegroundRgb = new TerminalColor((uint)red, (uint)green, (uint)blue);
         }
 
         public void SetRgbBackgroundColor(int red, int green, int blue)
         {
             LogController("SetRgbBackgroundColor(r:" + red + ", g:" + green + ", b:" + blue + ")");
 
-            if (CursorState.Attributes.BackgroundRgb == null)
-                CursorState.Attributes.BackgroundRgb = new TerminalColor { Red = (uint)red, Green = (uint)green, Blue = (uint)blue };
-            else
-                CursorState.Attributes.BackgroundRgb.Set((uint)red, (uint)green, (uint)blue);
+            CursorState.Attributes.BackgroundRgb = new TerminalColor((uint)red, (uint)green, (uint)blue);
         }
 
         public void SetRgbForegroundColor(string xParseColor)
         {
             LogController($"SetRgbForegroundColor(xParseColor={xParseColor})");
 
-            if (CursorState.Attributes.ForegroundRgb == null)
-                CursorState.Attributes.ForegroundRgb = new TerminalColor(xParseColor);
-            else
-                CursorState.Attributes.ForegroundRgb.Set(xParseColor);
+            CursorState.Attributes.ForegroundRgb = new TerminalColor(xParseColor);
         }
 
         public void ResetRgbForegroundColor()
@@ -1763,10 +1754,7 @@
         {
             LogController($"SetRgbBackgroundColor(xParseColor={xParseColor})");
 
-            if (CursorState.Attributes.BackgroundRgb == null)
-                CursorState.Attributes.BackgroundRgb = new TerminalColor(xParseColor);
-            else
-                CursorState.Attributes.BackgroundRgb.Set(xParseColor);
+            CursorState.Attributes.BackgroundRgb = new TerminalColor(xParseColor);
         }
 
         public void ResetRgbBackgroundColor()
@@ -1779,10 +1767,7 @@
             LogController("SetIso8613PaletteForeground(e:" + paletteEntry + ")");
             if(TerminalColor.Iso8613.TryGetValue(paletteEntry, out TerminalColor color))
             {
-                if (CursorState.Attributes.ForegroundRgb == null)
-                    CursorState.Attributes.ForegroundRgb = new TerminalColor(color);
-                else
-                    CursorState.Attributes.ForegroundRgb.ARGB = color.ARGB;
+                CursorState.Attributes.ForegroundRgb = new TerminalColor(color);
             }
         }
 
@@ -1791,10 +1776,7 @@
             LogController("SetIso8613PaletteBackground(e:" + paletteEntry + ")");
             if (TerminalColor.Iso8613.TryGetValue(paletteEntry, out TerminalColor color))
             {
-                if (CursorState.Attributes.BackgroundRgb == null)
-                    CursorState.Attributes.BackgroundRgb = new TerminalColor(color);
-                else
-                    CursorState.Attributes.BackgroundRgb.ARGB = color.ARGB;
+                CursorState.Attributes.BackgroundRgb = new TerminalColor(color);
             }
         }
 
-- 
2.37.1.windows.1

